{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _padEnd = _interopRequireDefault(require(\"lodash/padEnd\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nvar StatisticNumber = function StatisticNumber(props) {\n  var value = props.value,\n      formatter = props.formatter,\n      precision = props.precision,\n      decimalSeparator = props.decimalSeparator,\n      _props$groupSeparator = props.groupSeparator,\n      groupSeparator = _props$groupSeparator === void 0 ? '' : _props$groupSeparator,\n      prefixCls = props.prefixCls;\n  var valueNode;\n\n  if (typeof formatter === 'function') {\n    // Customize formatter\n    valueNode = formatter(value);\n  } else {\n    // Internal formatter\n    var val = String(value);\n    var cells = val.match(/^(-?)(\\d*)(\\.(\\d+))?$/); // Process if illegal number\n\n    if (!cells) {\n      valueNode = val;\n    } else {\n      var negative = cells[1];\n\n      var _int = cells[2] || '0';\n\n      var decimal = cells[4] || '';\n      _int = _int.replace(/\\B(?=(\\d{3})+(?!\\d))/g, groupSeparator);\n\n      if (typeof precision === 'number') {\n        decimal = (0, _padEnd[\"default\"])(decimal, precision, '0').slice(0, precision);\n      }\n\n      if (decimal) {\n        decimal = \"\".concat(decimalSeparator).concat(decimal);\n      }\n\n      valueNode = [React.createElement(\"span\", {\n        key: \"int\",\n        className: \"\".concat(prefixCls, \"-content-value-int\")\n      }, negative, _int), decimal && React.createElement(\"span\", {\n        key: \"decimal\",\n        className: \"\".concat(prefixCls, \"-content-value-decimal\")\n      }, decimal)];\n    }\n  }\n\n  return React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-content-value\")\n  }, valueNode);\n};\n\nvar _default = StatisticNumber;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["statistic/Number.jsx"],"names":["StatisticNumber","value","formatter","precision","decimalSeparator","groupSeparator","prefixCls","props","valueNode","val","String","cells","negative","int","decimal"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,eAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAAA,KAAA,EAAS;AAAA,MACrBC,KADqB,GAC6DM,KAD7D,CAAA,KAAA;AAAA,MACdL,SADc,GAC6DK,KAD7D,CAAA,SAAA;AAAA,MACHJ,SADG,GAC6DI,KAD7D,CAAA,SAAA;AAAA,MACQH,gBADR,GAC6DG,KAD7D,CAAA,gBAAA;AAAA,MAAA,qBAAA,GAC6DA,KAD7D,CAAA,cAAA;AAAA,MAC0BF,cAD1B,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,qBAAA;AAAA,MAC+CC,SAD/C,GAC6DC,KAD7D,CAAA,SAAA;AAE7B,MAAA,SAAA;;AACA,MAAI,OAAA,SAAA,KAAJ,UAAA,EAAqC;AACjC;AACAC,IAAAA,SAAS,GAAGN,SAAS,CAArBM,KAAqB,CAArBA;AAFJ,GAAA,MAIK;AACD;AACA,QAAMC,GAAG,GAAGC,MAAM,CAAlB,KAAkB,CAAlB;AACA,QAAMC,KAAK,GAAGF,GAAG,CAAHA,KAAAA,CAHb,uBAGaA,CAAd,CAHC,CAID;;AACA,QAAI,CAAJ,KAAA,EAAY;AACRD,MAAAA,SAAS,GAATA,GAAAA;AADJ,KAAA,MAGK;AACD,UAAMI,QAAQ,GAAGD,KAAK,CAAtB,CAAsB,CAAtB;;AACA,UAAIE,IAAG,GAAGF,KAAK,CAALA,CAAK,CAALA,IAAV,GAAA;;AACA,UAAIG,OAAO,GAAGH,KAAK,CAALA,CAAK,CAALA,IAAd,EAAA;AACAE,MAAAA,IAAG,GAAGA,IAAG,CAAHA,OAAAA,CAAAA,uBAAAA,EAANA,cAAMA,CAANA;;AACA,UAAI,OAAA,SAAA,KAAJ,QAAA,EAAmC;AAC/BC,QAAAA,OAAO,GAAG,CAAA,GAAA,OAAA,CAAA,SAAA,CAAA,EAAA,OAAA,EAAA,SAAA,EAAA,GAAA,EAAA,KAAA,CAAA,CAAA,EAAVA,SAAU,CAAVA;AACH;;AACD,UAAA,OAAA,EAAa;AACTA,QAAAA,OAAO,GAAA,GAAA,MAAA,CAAA,gBAAA,EAAA,MAAA,CAAPA,OAAO,CAAPA;AACH;;AACDN,MAAAA,SAAS,GAAG,CACR,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,QAAA,GAAG,EAAT,KAAA;AAAgB,QAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,oBAAA;AAAzB,OAAA,EAAA,QAAA,EADQ,IACR,CADQ,EAKRM,OAAO,IAAK,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,QAAA,GAAG,EAAT,SAAA;AAAoB,QAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,wBAAA;AAA7B,OAAA,EALhBN,OAKgB,CALJ,CAAZA;AASH;AACJ;;AACD,SAAO,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,gBAAA;AAAf,GAAA,EAAP,SAAO,CAAP;AArCJ,CAAA;;eAuCeR,e","sourcesContent":["import * as React from 'react';\nimport padEnd from 'lodash/padEnd';\nconst StatisticNumber = props => {\n    const { value, formatter, precision, decimalSeparator, groupSeparator = '', prefixCls } = props;\n    let valueNode;\n    if (typeof formatter === 'function') {\n        // Customize formatter\n        valueNode = formatter(value);\n    }\n    else {\n        // Internal formatter\n        const val = String(value);\n        const cells = val.match(/^(-?)(\\d*)(\\.(\\d+))?$/);\n        // Process if illegal number\n        if (!cells) {\n            valueNode = val;\n        }\n        else {\n            const negative = cells[1];\n            let int = cells[2] || '0';\n            let decimal = cells[4] || '';\n            int = int.replace(/\\B(?=(\\d{3})+(?!\\d))/g, groupSeparator);\n            if (typeof precision === 'number') {\n                decimal = padEnd(decimal, precision, '0').slice(0, precision);\n            }\n            if (decimal) {\n                decimal = `${decimalSeparator}${decimal}`;\n            }\n            valueNode = [\n                <span key=\"int\" className={`${prefixCls}-content-value-int`}>\n          {negative}\n          {int}\n        </span>,\n                decimal && (<span key=\"decimal\" className={`${prefixCls}-content-value-decimal`}>\n            {decimal}\n          </span>),\n            ];\n        }\n    }\n    return <span className={`${prefixCls}-content-value`}>{valueNode}</span>;\n};\nexport default StatisticNumber;\n"]},"metadata":{},"sourceType":"script"}