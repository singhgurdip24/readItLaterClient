{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _isEqual = _interopRequireDefault(require(\"lodash/isEqual\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _rcFieldForm = require(\"rc-field-form\");\n\nvar _omit = _interopRequireDefault(require(\"omit.js\"));\n\nvar _row = _interopRequireDefault(require(\"../grid/row\"));\n\nvar _configProvider = require(\"../config-provider\");\n\nvar _type = require(\"../_util/type\");\n\nvar _warning = _interopRequireDefault(require(\"../_util/warning\"));\n\nvar _FormItemLabel = _interopRequireDefault(require(\"./FormItemLabel\"));\n\nvar _FormItemInput = _interopRequireDefault(require(\"./FormItemInput\"));\n\nvar _context = require(\"./context\");\n\nvar _util = require(\"./util\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar ValidateStatuses = (0, _type.tuple)('success', 'warning', 'error', 'validating', '');\nvar MemoInput = React.memo(function (_ref) {\n  var children = _ref.children;\n  return children;\n}, function (prev, next) {\n  return prev.value === next.value && prev.update === next.update;\n});\n\nfunction hasValidName(name) {\n  if (name === null) {\n    (0, _warning[\"default\"])(false, 'Form.Item', '`null` is passed as `name` property');\n  }\n\n  return !(name === undefined || name === null);\n}\n\nfunction FormItem(props) {\n  var name = props.name,\n      fieldKey = props.fieldKey,\n      noStyle = props.noStyle,\n      dependencies = props.dependencies,\n      customizePrefixCls = props.prefixCls,\n      style = props.style,\n      className = props.className,\n      shouldUpdate = props.shouldUpdate,\n      hasFeedback = props.hasFeedback,\n      help = props.help,\n      rules = props.rules,\n      validateStatus = props.validateStatus,\n      children = props.children,\n      required = props.required,\n      _props$trigger = props.trigger,\n      trigger = _props$trigger === void 0 ? 'onChange' : _props$trigger,\n      _props$validateTrigge = props.validateTrigger,\n      validateTrigger = _props$validateTrigge === void 0 ? 'onChange' : _props$validateTrigge,\n      restProps = __rest(props, [\"name\", \"fieldKey\", \"noStyle\", \"dependencies\", \"prefixCls\", \"style\", \"className\", \"shouldUpdate\", \"hasFeedback\", \"help\", \"rules\", \"validateStatus\", \"children\", \"required\", \"trigger\", \"validateTrigger\"]);\n\n  var destroyRef = React.useRef(false);\n\n  var _React$useContext = React.useContext(_configProvider.ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls;\n\n  var formContext = React.useContext(_context.FormContext);\n\n  var _React$useContext2 = React.useContext(_context.FormItemContext),\n      updateItemErrors = _React$useContext2.updateItemErrors;\n\n  var _React$useState = React.useState(!!help),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      domErrorVisible = _React$useState2[0],\n      innerSetDomErrorVisible = _React$useState2[1];\n\n  var _React$useState3 = React.useState({}),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      inlineErrors = _React$useState4[0],\n      innerSetInlineErrors = _React$useState4[1];\n\n  function setDomErrorVisible(visible) {\n    if (!destroyRef.current) {\n      innerSetDomErrorVisible(visible);\n    }\n  }\n\n  function setInlineErrors(errors) {\n    if (!destroyRef.current) {\n      innerSetInlineErrors(errors);\n    }\n  }\n\n  var formName = formContext.name;\n  var hasName = hasValidName(name); // Cache Field NamePath\n\n  var nameRef = React.useRef([]); // Should clean up if Field removed\n\n  React.useEffect(function () {\n    return function () {\n      destroyRef.current = true;\n      updateItemErrors(nameRef.current.join('__SPLIT__'), []);\n    };\n  }, []);\n  var prefixCls = getPrefixCls('form', customizePrefixCls); // ======================== Errors ========================\n  // Collect noStyle Field error to the top FormItem\n\n  var updateChildItemErrors = noStyle ? updateItemErrors : function (subName, subErrors) {\n    if (!(0, _isEqual[\"default\"])(inlineErrors[subName], subErrors)) {\n      Promise.resolve().then(function () {\n        setInlineErrors(_extends(_extends({}, inlineErrors), _defineProperty({}, subName, subErrors)));\n      });\n    }\n  };\n\n  function renderLayout(baseChildren, fieldId, meta, isRequired) {\n    var _itemClassName;\n\n    if (noStyle) {\n      return baseChildren;\n    } // ======================== Errors ========================\n\n\n    var mergedErrors;\n\n    if (help !== undefined && help !== null) {\n      mergedErrors = (0, _util.toArray)(help);\n    } else {\n      mergedErrors = meta ? meta.errors : [];\n      Object.keys(inlineErrors).forEach(function (subName) {\n        var subErrors = inlineErrors[subName] || [];\n\n        if (subErrors.length) {\n          mergedErrors = [].concat(_toConsumableArray(mergedErrors), _toConsumableArray(subErrors));\n        }\n      });\n    } // ======================== Status ========================\n\n\n    var mergedValidateStatus = '';\n\n    if (validateStatus !== undefined) {\n      mergedValidateStatus = validateStatus;\n    } else if (meta && meta.validating) {\n      mergedValidateStatus = 'validating';\n    } else if (!help && mergedErrors.length) {\n      mergedValidateStatus = 'error';\n    } else if (meta && meta.touched) {\n      mergedValidateStatus = 'success';\n    }\n\n    var itemClassName = (_itemClassName = {}, _defineProperty(_itemClassName, \"\".concat(prefixCls, \"-item\"), true), _defineProperty(_itemClassName, \"\".concat(prefixCls, \"-item-with-help\"), domErrorVisible || help), _defineProperty(_itemClassName, \"\".concat(className), !!className), _defineProperty(_itemClassName, \"\".concat(prefixCls, \"-item-has-feedback\"), mergedValidateStatus && hasFeedback), _defineProperty(_itemClassName, \"\".concat(prefixCls, \"-item-has-success\"), mergedValidateStatus === 'success'), _defineProperty(_itemClassName, \"\".concat(prefixCls, \"-item-has-warning\"), mergedValidateStatus === 'warning'), _defineProperty(_itemClassName, \"\".concat(prefixCls, \"-item-has-error\"), mergedValidateStatus === 'error'), _defineProperty(_itemClassName, \"\".concat(prefixCls, \"-item-has-error-leave\"), !help && domErrorVisible && mergedValidateStatus !== 'error'), _defineProperty(_itemClassName, \"\".concat(prefixCls, \"-item-is-validating\"), mergedValidateStatus === 'validating'), _itemClassName); // ======================= Children =======================\n\n    return React.createElement(_row[\"default\"], _extends({\n      className: (0, _classnames[\"default\"])(itemClassName),\n      style: style,\n      key: \"row\"\n    }, (0, _omit[\"default\"])(restProps, ['colon', 'extra', 'getValueFromEvent', 'hasFeedback', 'help', 'htmlFor', 'id', 'label', 'labelAlign', 'labelCol', 'normalize', 'required', 'validateFirst', 'validateStatus', 'valuePropName', 'wrapperCol'])), React.createElement(_FormItemLabel[\"default\"], _extends({\n      htmlFor: fieldId,\n      required: isRequired\n    }, props, {\n      prefixCls: prefixCls\n    })), React.createElement(_FormItemInput[\"default\"], _extends({}, props, meta, {\n      errors: mergedErrors,\n      prefixCls: prefixCls,\n      onDomErrorVisibleChange: setDomErrorVisible,\n      validateStatus: mergedValidateStatus\n    }), React.createElement(_context.FormItemContext.Provider, {\n      value: {\n        updateItemErrors: updateChildItemErrors\n      }\n    }, baseChildren)));\n  }\n\n  var isRenderProps = typeof children === 'function';\n\n  if (!hasName && !isRenderProps && !dependencies) {\n    return renderLayout(children);\n  } // Record for real component render\n\n\n  var updateRef = React.useRef(0);\n  updateRef.current += 1;\n  return React.createElement(_rcFieldForm.Field, _extends({}, props, {\n    trigger: trigger,\n    validateTrigger: validateTrigger,\n    onReset: function onReset() {\n      setDomErrorVisible(false);\n    }\n  }), function (control, meta, context) {\n    var errors = meta.errors;\n    var mergedName = (0, _util.toArray)(name).length && meta ? meta.name : [];\n    var fieldId = (0, _util.getFieldId)(mergedName, formName);\n\n    if (noStyle) {\n      nameRef.current = _toConsumableArray(mergedName);\n\n      if (fieldKey) {\n        nameRef.current[nameRef.current.length - 1] = fieldKey;\n      }\n\n      updateItemErrors(nameRef.current.join('__SPLIT__'), errors);\n    }\n\n    var isRequired = required !== undefined ? required : !!(rules && rules.some(function (rule) {\n      if (rule && _typeof(rule) === 'object' && rule.required) {\n        return true;\n      }\n\n      if (typeof rule === 'function') {\n        var ruleEntity = rule(context);\n        return ruleEntity && ruleEntity.required;\n      }\n\n      return false;\n    })); // ======================= Children =======================\n\n    var mergedControl = _extends(_extends({}, control), {\n      id: fieldId\n    });\n\n    var childNode = null;\n\n    if (Array.isArray(children) && hasName) {\n      (0, _warning[\"default\"])(false, 'Form.Item', '`children` is array of render props cannot have `name`.');\n      childNode = children;\n    } else if (isRenderProps && (!shouldUpdate || hasName)) {\n      (0, _warning[\"default\"])(!!shouldUpdate, 'Form.Item', '`children` of render props only work with `shouldUpdate`.');\n      (0, _warning[\"default\"])(!hasName, 'Form.Item', \"Do not use `name` with `children` of render props since it's not a field.\");\n    } else if (dependencies && !isRenderProps && !hasName) {\n      (0, _warning[\"default\"])(false, 'Form.Item', 'Must set `name` or use render props when `dependencies` is set.');\n    } else if (React.isValidElement(children)) {\n      var childProps = _extends(_extends({}, children.props), mergedControl); // We should keep user origin event handler\n\n\n      var triggers = new Set([].concat(_toConsumableArray((0, _util.toArray)(trigger)), _toConsumableArray((0, _util.toArray)(validateTrigger))));\n      triggers.forEach(function (eventName) {\n        childProps[eventName] = function () {\n          var _a2, _c2;\n\n          var _a, _b, _c;\n\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          (_a = mergedControl[eventName]) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [mergedControl].concat(args));\n          (_c = (_b = children.props)[eventName]) === null || _c === void 0 ? void 0 : (_c2 = _c).call.apply(_c2, [_b].concat(args));\n        };\n      });\n      childNode = React.createElement(MemoInput, {\n        value: mergedControl[props.valuePropName || 'value'],\n        update: updateRef.current\n      }, React.cloneElement(children, childProps));\n    } else if (isRenderProps && shouldUpdate && !hasName) {\n      childNode = children(context);\n    } else {\n      (0, _warning[\"default\"])(!mergedName.length, 'Form.Item', '`name` is only used for validate React element. If you are using Form.Item as layout display, please remove `name` instead.');\n      childNode = children;\n    }\n\n    return renderLayout(childNode, fieldId, meta, isRequired);\n  });\n}\n\nvar _default = FormItem;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["form/FormItem.jsx"],"names":["__rest","t","Object","e","s","i","p","ValidateStatuses","MemoInput","children","prev","next","name","fieldKey","noStyle","dependencies","customizePrefixCls","style","className","shouldUpdate","hasFeedback","help","rules","validateStatus","required","trigger","validateTrigger","props","restProps","destroyRef","React","getPrefixCls","ConfigContext","formContext","FormContext","updateItemErrors","FormItemContext","domErrorVisible","innerSetDomErrorVisible","inlineErrors","innerSetInlineErrors","formName","hasName","hasValidName","nameRef","prefixCls","updateChildItemErrors","Promise","setInlineErrors","mergedErrors","meta","subErrors","mergedValidateStatus","itemClassName","isRequired","isRenderProps","renderLayout","updateRef","setDomErrorVisible","errors","mergedName","fieldId","rule","ruleEntity","mergedControl","id","childNode","Array","childProps","triggers","args","_a","_c","_b","current","FormItem"],"mappings":"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","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport isEqual from 'lodash/isEqual';\nimport classNames from 'classnames';\nimport { Field } from 'rc-field-form';\nimport omit from 'omit.js';\nimport Row from '../grid/row';\nimport { ConfigContext } from '../config-provider';\nimport { tuple } from '../_util/type';\nimport warning from '../_util/warning';\nimport FormItemLabel from './FormItemLabel';\nimport FormItemInput from './FormItemInput';\nimport { FormContext, FormItemContext } from './context';\nimport { toArray, getFieldId } from './util';\nconst ValidateStatuses = tuple('success', 'warning', 'error', 'validating', '');\nconst MemoInput = React.memo(({ children }) => {\n    return children;\n}, (prev, next) => {\n    return prev.value === next.value && prev.update === next.update;\n});\nfunction hasValidName(name) {\n    if (name === null) {\n        warning(false, 'Form.Item', '`null` is passed as `name` property');\n    }\n    return !(name === undefined || name === null);\n}\nfunction FormItem(props) {\n    const { name, fieldKey, noStyle, dependencies, prefixCls: customizePrefixCls, style, className, shouldUpdate, hasFeedback, help, rules, validateStatus, children, required, trigger = 'onChange', validateTrigger = 'onChange' } = props, restProps = __rest(props, [\"name\", \"fieldKey\", \"noStyle\", \"dependencies\", \"prefixCls\", \"style\", \"className\", \"shouldUpdate\", \"hasFeedback\", \"help\", \"rules\", \"validateStatus\", \"children\", \"required\", \"trigger\", \"validateTrigger\"]);\n    const destroyRef = React.useRef(false);\n    const { getPrefixCls } = React.useContext(ConfigContext);\n    const formContext = React.useContext(FormContext);\n    const { updateItemErrors } = React.useContext(FormItemContext);\n    const [domErrorVisible, innerSetDomErrorVisible] = React.useState(!!help);\n    const [inlineErrors, innerSetInlineErrors] = React.useState({});\n    function setDomErrorVisible(visible) {\n        if (!destroyRef.current) {\n            innerSetDomErrorVisible(visible);\n        }\n    }\n    function setInlineErrors(errors) {\n        if (!destroyRef.current) {\n            innerSetInlineErrors(errors);\n        }\n    }\n    const { name: formName } = formContext;\n    const hasName = hasValidName(name);\n    // Cache Field NamePath\n    const nameRef = React.useRef([]);\n    // Should clean up if Field removed\n    React.useEffect(() => {\n        return () => {\n            destroyRef.current = true;\n            updateItemErrors(nameRef.current.join('__SPLIT__'), []);\n        };\n    }, []);\n    const prefixCls = getPrefixCls('form', customizePrefixCls);\n    // ======================== Errors ========================\n    // Collect noStyle Field error to the top FormItem\n    const updateChildItemErrors = noStyle\n        ? updateItemErrors\n        : (subName, subErrors) => {\n            if (!isEqual(inlineErrors[subName], subErrors)) {\n                Promise.resolve().then(() => {\n                    setInlineErrors(Object.assign(Object.assign({}, inlineErrors), { [subName]: subErrors }));\n                });\n            }\n        };\n    function renderLayout(baseChildren, fieldId, meta, isRequired) {\n        if (noStyle) {\n            return baseChildren;\n        }\n        // ======================== Errors ========================\n        let mergedErrors;\n        if (help !== undefined && help !== null) {\n            mergedErrors = toArray(help);\n        }\n        else {\n            mergedErrors = meta ? meta.errors : [];\n            Object.keys(inlineErrors).forEach(subName => {\n                const subErrors = inlineErrors[subName] || [];\n                if (subErrors.length) {\n                    mergedErrors = [...mergedErrors, ...subErrors];\n                }\n            });\n        }\n        // ======================== Status ========================\n        let mergedValidateStatus = '';\n        if (validateStatus !== undefined) {\n            mergedValidateStatus = validateStatus;\n        }\n        else if (meta && meta.validating) {\n            mergedValidateStatus = 'validating';\n        }\n        else if (!help && mergedErrors.length) {\n            mergedValidateStatus = 'error';\n        }\n        else if (meta && meta.touched) {\n            mergedValidateStatus = 'success';\n        }\n        const itemClassName = {\n            [`${prefixCls}-item`]: true,\n            [`${prefixCls}-item-with-help`]: domErrorVisible || help,\n            [`${className}`]: !!className,\n            // Status\n            [`${prefixCls}-item-has-feedback`]: mergedValidateStatus && hasFeedback,\n            [`${prefixCls}-item-has-success`]: mergedValidateStatus === 'success',\n            [`${prefixCls}-item-has-warning`]: mergedValidateStatus === 'warning',\n            [`${prefixCls}-item-has-error`]: mergedValidateStatus === 'error',\n            [`${prefixCls}-item-has-error-leave`]: !help && domErrorVisible && mergedValidateStatus !== 'error',\n            [`${prefixCls}-item-is-validating`]: mergedValidateStatus === 'validating',\n        };\n        // ======================= Children =======================\n        return (<Row className={classNames(itemClassName)} style={style} key=\"row\" {...omit(restProps, [\n            'colon',\n            'extra',\n            'getValueFromEvent',\n            'hasFeedback',\n            'help',\n            'htmlFor',\n            'id',\n            'label',\n            'labelAlign',\n            'labelCol',\n            'normalize',\n            'required',\n            'validateFirst',\n            'validateStatus',\n            'valuePropName',\n            'wrapperCol',\n        ])}>\n        \n        <FormItemLabel htmlFor={fieldId} required={isRequired} {...props} prefixCls={prefixCls}/>\n        \n        <FormItemInput {...props} {...meta} errors={mergedErrors} prefixCls={prefixCls} onDomErrorVisibleChange={setDomErrorVisible} validateStatus={mergedValidateStatus}>\n          <FormItemContext.Provider value={{ updateItemErrors: updateChildItemErrors }}>\n            {baseChildren}\n          </FormItemContext.Provider>\n        </FormItemInput>\n      </Row>);\n    }\n    const isRenderProps = typeof children === 'function';\n    if (!hasName && !isRenderProps && !dependencies) {\n        return renderLayout(children);\n    }\n    // Record for real component render\n    const updateRef = React.useRef(0);\n    updateRef.current += 1;\n    return (<Field {...props} trigger={trigger} validateTrigger={validateTrigger} onReset={() => {\n        setDomErrorVisible(false);\n    }}>\n      {(control, meta, context) => {\n        const { errors } = meta;\n        const mergedName = toArray(name).length && meta ? meta.name : [];\n        const fieldId = getFieldId(mergedName, formName);\n        if (noStyle) {\n            nameRef.current = [...mergedName];\n            if (fieldKey) {\n                nameRef.current[nameRef.current.length - 1] = fieldKey;\n            }\n            updateItemErrors(nameRef.current.join('__SPLIT__'), errors);\n        }\n        const isRequired = required !== undefined\n            ? required\n            : !!(rules &&\n                rules.some(rule => {\n                    if (rule && typeof rule === 'object' && rule.required) {\n                        return true;\n                    }\n                    if (typeof rule === 'function') {\n                        const ruleEntity = rule(context);\n                        return ruleEntity && ruleEntity.required;\n                    }\n                    return false;\n                }));\n        // ======================= Children =======================\n        const mergedControl = Object.assign(Object.assign({}, control), { id: fieldId });\n        let childNode = null;\n        if (Array.isArray(children) && hasName) {\n            warning(false, 'Form.Item', '`children` is array of render props cannot have `name`.');\n            childNode = children;\n        }\n        else if (isRenderProps && (!shouldUpdate || hasName)) {\n            warning(!!shouldUpdate, 'Form.Item', '`children` of render props only work with `shouldUpdate`.');\n            warning(!hasName, 'Form.Item', \"Do not use `name` with `children` of render props since it's not a field.\");\n        }\n        else if (dependencies && !isRenderProps && !hasName) {\n            warning(false, 'Form.Item', 'Must set `name` or use render props when `dependencies` is set.');\n        }\n        else if (React.isValidElement(children)) {\n            const childProps = Object.assign(Object.assign({}, children.props), mergedControl);\n            // We should keep user origin event handler\n            const triggers = new Set([...toArray(trigger), ...toArray(validateTrigger)]);\n            triggers.forEach(eventName => {\n                childProps[eventName] = (...args) => {\n                    var _a, _b, _c;\n                    (_a = mergedControl[eventName]) === null || _a === void 0 ? void 0 : _a.call(mergedControl, ...args);\n                    (_c = (_b = children.props)[eventName]) === null || _c === void 0 ? void 0 : _c.call(_b, ...args);\n                };\n            });\n            childNode = (<MemoInput value={mergedControl[props.valuePropName || 'value']} update={updateRef.current}>\n              {React.cloneElement(children, childProps)}\n            </MemoInput>);\n        }\n        else if (isRenderProps && shouldUpdate && !hasName) {\n            childNode = children(context);\n        }\n        else {\n            warning(!mergedName.length, 'Form.Item', '`name` is only used for validate React element. If you are using Form.Item as layout display, please remove `name` instead.');\n            childNode = children;\n        }\n        return renderLayout(childNode, fieldId, meta, isRequired);\n    }}\n    </Field>);\n}\nexport default FormItem;\n"]},"metadata":{},"sourceType":"script"}