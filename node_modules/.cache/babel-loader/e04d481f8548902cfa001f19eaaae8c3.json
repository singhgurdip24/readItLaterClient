{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTargetRect = getTargetRect;\nexports.getFixedTop = getFixedTop;\nexports.getFixedBottom = getFixedBottom;\nexports.getObserverEntities = getObserverEntities;\nexports.addObserveTarget = addObserveTarget;\nexports.removeObserveTarget = removeObserveTarget;\n\nvar _addEventListener = _interopRequireDefault(require(\"rc-util/lib/Dom/addEventListener\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction getTargetRect(target) {\n  return target !== window ? target.getBoundingClientRect() : {\n    top: 0,\n    bottom: window.innerHeight\n  };\n}\n\nfunction getFixedTop(placeholderReact, targetRect, offsetTop) {\n  if (offsetTop !== undefined && targetRect.top > placeholderReact.top - offsetTop) {\n    return offsetTop + targetRect.top;\n  }\n\n  return undefined;\n}\n\nfunction getFixedBottom(placeholderReact, targetRect, offsetBottom) {\n  if (offsetBottom !== undefined && targetRect.bottom < placeholderReact.bottom + offsetBottom) {\n    var targetBottomOffset = window.innerHeight - targetRect.bottom;\n    return offsetBottom + targetBottomOffset;\n  }\n\n  return undefined;\n} // ======================== Observer ========================\n\n\nvar TRIGGER_EVENTS = ['resize', 'scroll', 'touchstart', 'touchmove', 'touchend', 'pageshow', 'load'];\nvar observerEntities = [];\n\nfunction getObserverEntities() {\n  // Only used in test env. Can be removed if refactor.\n  return observerEntities;\n}\n\nfunction addObserveTarget(target, affix) {\n  if (!target) return;\n  var entity = observerEntities.find(function (item) {\n    return item.target === target;\n  });\n\n  if (entity) {\n    entity.affixList.push(affix);\n  } else {\n    entity = {\n      target: target,\n      affixList: [affix],\n      eventHandlers: {}\n    };\n    observerEntities.push(entity); // Add listener\n\n    TRIGGER_EVENTS.forEach(function (eventName) {\n      entity.eventHandlers[eventName] = (0, _addEventListener[\"default\"])(target, eventName, function () {\n        entity.affixList.forEach(function (targetAffix) {\n          targetAffix.lazyUpdatePosition();\n        });\n      });\n    });\n  }\n}\n\nfunction removeObserveTarget(affix) {\n  var observerEntity = observerEntities.find(function (oriObserverEntity) {\n    var hasAffix = oriObserverEntity.affixList.some(function (item) {\n      return item === affix;\n    });\n\n    if (hasAffix) {\n      oriObserverEntity.affixList = oriObserverEntity.affixList.filter(function (item) {\n        return item !== affix;\n      });\n    }\n\n    return hasAffix;\n  });\n\n  if (observerEntity && observerEntity.affixList.length === 0) {\n    observerEntities = observerEntities.filter(function (item) {\n      return item !== observerEntity;\n    }); // Remove listener\n\n    TRIGGER_EVENTS.forEach(function (eventName) {\n      var handler = observerEntity.eventHandlers[eventName];\n\n      if (handler && handler.remove) {\n        handler.remove();\n      }\n    });\n  }\n}","map":{"version":3,"sources":["affix/utils.js"],"names":["target","top","bottom","window","innerHeight","offsetTop","targetRect","placeholderReact","offsetBottom","targetBottomOffset","TRIGGER_EVENTS","observerEntities","entity","item","affixList","eventHandlers","targetAffix","observerEntity","hasAffix","oriObserverEntity","handler"],"mappings":"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","sourcesContent":["import addEventListener from 'rc-util/lib/Dom/addEventListener';\nexport function getTargetRect(target) {\n    return target !== window\n        ? target.getBoundingClientRect()\n        : { top: 0, bottom: window.innerHeight };\n}\nexport function getFixedTop(placeholderReact, targetRect, offsetTop) {\n    if (offsetTop !== undefined && targetRect.top > placeholderReact.top - offsetTop) {\n        return offsetTop + targetRect.top;\n    }\n    return undefined;\n}\nexport function getFixedBottom(placeholderReact, targetRect, offsetBottom) {\n    if (offsetBottom !== undefined && targetRect.bottom < placeholderReact.bottom + offsetBottom) {\n        const targetBottomOffset = window.innerHeight - targetRect.bottom;\n        return offsetBottom + targetBottomOffset;\n    }\n    return undefined;\n}\n// ======================== Observer ========================\nconst TRIGGER_EVENTS = [\n    'resize',\n    'scroll',\n    'touchstart',\n    'touchmove',\n    'touchend',\n    'pageshow',\n    'load',\n];\nlet observerEntities = [];\nexport function getObserverEntities() {\n    // Only used in test env. Can be removed if refactor.\n    return observerEntities;\n}\nexport function addObserveTarget(target, affix) {\n    if (!target)\n        return;\n    let entity = observerEntities.find(item => item.target === target);\n    if (entity) {\n        entity.affixList.push(affix);\n    }\n    else {\n        entity = {\n            target,\n            affixList: [affix],\n            eventHandlers: {},\n        };\n        observerEntities.push(entity);\n        // Add listener\n        TRIGGER_EVENTS.forEach(eventName => {\n            entity.eventHandlers[eventName] = addEventListener(target, eventName, () => {\n                entity.affixList.forEach(targetAffix => {\n                    targetAffix.lazyUpdatePosition();\n                });\n            });\n        });\n    }\n}\nexport function removeObserveTarget(affix) {\n    const observerEntity = observerEntities.find(oriObserverEntity => {\n        const hasAffix = oriObserverEntity.affixList.some(item => item === affix);\n        if (hasAffix) {\n            oriObserverEntity.affixList = oriObserverEntity.affixList.filter(item => item !== affix);\n        }\n        return hasAffix;\n    });\n    if (observerEntity && observerEntity.affixList.length === 0) {\n        observerEntities = observerEntities.filter(item => item !== observerEntity);\n        // Remove listener\n        TRIGGER_EVENTS.forEach(eventName => {\n            const handler = observerEntity.eventHandlers[eventName];\n            if (handler && handler.remove) {\n                handler.remove();\n            }\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"script"}