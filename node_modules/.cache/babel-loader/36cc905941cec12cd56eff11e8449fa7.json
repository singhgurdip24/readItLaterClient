{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _toArray = _interopRequireDefault(require(\"rc-util/lib/Children/toArray\"));\n\nvar _findDOMNode = _interopRequireDefault(require(\"rc-util/lib/Dom/findDOMNode\"));\n\nvar _copyToClipboard = _interopRequireDefault(require(\"copy-to-clipboard\"));\n\nvar _omit = _interopRequireDefault(require(\"omit.js\"));\n\nvar _EditOutlined = _interopRequireDefault(require(\"@ant-design/icons/EditOutlined\"));\n\nvar _CheckOutlined = _interopRequireDefault(require(\"@ant-design/icons/CheckOutlined\"));\n\nvar _CopyOutlined = _interopRequireDefault(require(\"@ant-design/icons/CopyOutlined\"));\n\nvar _rcResizeObserver = _interopRequireDefault(require(\"rc-resize-observer\"));\n\nvar _configProvider = require(\"../config-provider\");\n\nvar _context = require(\"../config-provider/context\");\n\nvar _LocaleReceiver = _interopRequireDefault(require(\"../locale-provider/LocaleReceiver\"));\n\nvar _warning = _interopRequireDefault(require(\"../_util/warning\"));\n\nvar _transButton = _interopRequireDefault(require(\"../_util/transButton\"));\n\nvar _raf = _interopRequireDefault(require(\"../_util/raf\"));\n\nvar _styleChecker = _interopRequireDefault(require(\"../_util/styleChecker\"));\n\nvar _tooltip = _interopRequireDefault(require(\"../tooltip\"));\n\nvar _Typography = _interopRequireDefault(require(\"./Typography\"));\n\nvar _Editable = _interopRequireDefault(require(\"./Editable\"));\n\nvar _util = _interopRequireDefault(require(\"./util\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar isLineClampSupport = (0, _styleChecker[\"default\"])('webkitLineClamp');\nvar isTextOverflowSupport = (0, _styleChecker[\"default\"])('textOverflow');\n\nfunction wrapperDecorations(_ref, content) {\n  var mark = _ref.mark,\n      code = _ref.code,\n      underline = _ref.underline,\n      del = _ref[\"delete\"],\n      strong = _ref.strong;\n  var currentContent = content;\n\n  function wrap(needed, tag) {\n    if (!needed) return;\n    currentContent = React.createElement(tag, {}, currentContent);\n  }\n\n  wrap(strong, 'strong');\n  wrap(underline, 'u');\n  wrap(del, 'del');\n  wrap(code, 'code');\n  wrap(mark, 'mark');\n  return currentContent;\n}\n\nvar ELLIPSIS_STR = '...';\n\nvar Base = /*#__PURE__*/function (_React$Component) {\n  _inherits(Base, _React$Component);\n\n  function Base() {\n    var _this;\n\n    _classCallCheck(this, Base);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Base).apply(this, arguments));\n    _this.state = {\n      edit: false,\n      copied: false,\n      ellipsisText: '',\n      ellipsisContent: null,\n      isEllipsis: false,\n      expanded: false,\n      clientRendered: false\n    }; // =============== Expend ===============\n\n    _this.onExpandClick = function () {\n      var _this$getEllipsis = _this.getEllipsis(),\n          onExpand = _this$getEllipsis.onExpand;\n\n      _this.setState({\n        expanded: true\n      });\n\n      if (onExpand) {\n        onExpand();\n      }\n    }; // ================ Edit ================\n\n\n    _this.onEditClick = function () {\n      _this.triggerEdit(true);\n    };\n\n    _this.onEditChange = function (value) {\n      var _this$getEditable = _this.getEditable(),\n          onChange = _this$getEditable.onChange;\n\n      if (onChange) {\n        onChange(value);\n      }\n\n      _this.triggerEdit(false);\n    };\n\n    _this.onEditCancel = function () {\n      _this.triggerEdit(false);\n    }; // ================ Copy ================\n\n\n    _this.onCopyClick = function () {\n      var _this$props = _this.props,\n          children = _this$props.children,\n          copyable = _this$props.copyable;\n\n      var copyConfig = _extends({}, _typeof(copyable) === 'object' ? copyable : null);\n\n      if (copyConfig.text === undefined) {\n        copyConfig.text = String(children);\n      }\n\n      (0, _copyToClipboard[\"default\"])(copyConfig.text || '');\n\n      _this.setState({\n        copied: true\n      }, function () {\n        if (copyConfig.onCopy) {\n          copyConfig.onCopy();\n        }\n\n        _this.copyId = window.setTimeout(function () {\n          _this.setState({\n            copied: false\n          });\n        }, 3000);\n      });\n    };\n\n    _this.setContentRef = function (node) {\n      _this.content = node;\n    };\n\n    _this.setEditRef = function (node) {\n      _this.editIcon = node;\n    };\n\n    _this.triggerEdit = function (edit) {\n      var _this$getEditable2 = _this.getEditable(),\n          onStart = _this$getEditable2.onStart;\n\n      if (edit && onStart) {\n        onStart();\n      }\n\n      _this.setState({\n        edit: edit\n      }, function () {\n        if (!edit && _this.editIcon) {\n          _this.editIcon.focus();\n        }\n      });\n    }; // ============== Ellipsis ==============\n\n\n    _this.resizeOnNextFrame = function () {\n      _raf[\"default\"].cancel(_this.rafId);\n\n      _this.rafId = (0, _raf[\"default\"])(function () {\n        // Do not bind `syncEllipsis`. It need for test usage on prototype\n        _this.syncEllipsis();\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Base, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        clientRendered: true\n      });\n      this.resizeOnNextFrame();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var children = this.props.children;\n      var ellipsis = this.getEllipsis();\n      var prevEllipsis = this.getEllipsis(prevProps);\n\n      if (children !== prevProps.children || ellipsis.rows !== prevEllipsis.rows) {\n        this.resizeOnNextFrame();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.clearTimeout(this.copyId);\n\n      _raf[\"default\"].cancel(this.rafId);\n    }\n  }, {\n    key: \"getEditable\",\n    value: function getEditable(props) {\n      var edit = this.state.edit;\n\n      var _ref2 = props || this.props,\n          editable = _ref2.editable;\n\n      if (!editable) return {\n        editing: edit\n      };\n      return _extends({\n        editing: edit\n      }, _typeof(editable) === 'object' ? editable : null);\n    }\n  }, {\n    key: \"getEllipsis\",\n    value: function getEllipsis(props) {\n      var _ref3 = props || this.props,\n          ellipsis = _ref3.ellipsis;\n\n      if (!ellipsis) return {};\n      return _extends({\n        rows: 1,\n        expandable: false\n      }, _typeof(ellipsis) === 'object' ? ellipsis : null);\n    }\n  }, {\n    key: \"canUseCSSEllipsis\",\n    value: function canUseCSSEllipsis() {\n      var clientRendered = this.state.clientRendered;\n      var _this$props2 = this.props,\n          editable = _this$props2.editable,\n          copyable = _this$props2.copyable;\n\n      var _this$getEllipsis2 = this.getEllipsis(),\n          rows = _this$getEllipsis2.rows,\n          expandable = _this$getEllipsis2.expandable,\n          suffix = _this$getEllipsis2.suffix;\n\n      if (suffix) return false; // Can't use css ellipsis since we need to provide the place for button\n\n      if (editable || copyable || expandable || !clientRendered) {\n        return false;\n      }\n\n      if (rows === 1) {\n        return isTextOverflowSupport;\n      }\n\n      return isLineClampSupport;\n    }\n  }, {\n    key: \"syncEllipsis\",\n    value: function syncEllipsis() {\n      var _this$state = this.state,\n          ellipsisText = _this$state.ellipsisText,\n          isEllipsis = _this$state.isEllipsis,\n          expanded = _this$state.expanded;\n\n      var _this$getEllipsis3 = this.getEllipsis(),\n          rows = _this$getEllipsis3.rows,\n          suffix = _this$getEllipsis3.suffix;\n\n      var children = this.props.children;\n      if (!rows || rows < 0 || !this.content || expanded) return; // Do not measure if css already support ellipsis\n\n      if (this.canUseCSSEllipsis()) return;\n      (0, _warning[\"default\"])((0, _toArray[\"default\"])(children).every(function (child) {\n        return typeof child === 'string';\n      }), 'Typography', '`ellipsis` should use string as children only.');\n\n      var _measure = (0, _util[\"default\"])((0, _findDOMNode[\"default\"])(this.content), {\n        rows: rows,\n        suffix: suffix\n      }, children, this.renderOperations(true), ELLIPSIS_STR),\n          content = _measure.content,\n          text = _measure.text,\n          ellipsis = _measure.ellipsis;\n\n      if (ellipsisText !== text || isEllipsis !== ellipsis) {\n        this.setState({\n          ellipsisText: text,\n          ellipsisContent: content,\n          isEllipsis: ellipsis\n        });\n      }\n    }\n  }, {\n    key: \"renderExpand\",\n    value: function renderExpand(forceRender) {\n      var _this$getEllipsis4 = this.getEllipsis(),\n          expandable = _this$getEllipsis4.expandable;\n\n      var prefixCls = this.props.prefixCls;\n      var _this$state2 = this.state,\n          expanded = _this$state2.expanded,\n          isEllipsis = _this$state2.isEllipsis;\n      if (!expandable) return null; // force render expand icon for measure usage or it will cause dead loop\n\n      if (!forceRender && (expanded || !isEllipsis)) return null;\n      return React.createElement(\"a\", {\n        key: \"expand\",\n        className: \"\".concat(prefixCls, \"-expand\"),\n        onClick: this.onExpandClick,\n        \"aria-label\": this.expandStr\n      }, this.expandStr);\n    }\n  }, {\n    key: \"renderEdit\",\n    value: function renderEdit() {\n      var _this$props3 = this.props,\n          editable = _this$props3.editable,\n          prefixCls = _this$props3.prefixCls;\n      if (!editable) return;\n      return React.createElement(_tooltip[\"default\"], {\n        key: \"edit\",\n        title: this.editStr\n      }, React.createElement(_transButton[\"default\"], {\n        ref: this.setEditRef,\n        className: \"\".concat(prefixCls, \"-edit\"),\n        onClick: this.onEditClick,\n        \"aria-label\": this.editStr\n      }, React.createElement(_EditOutlined[\"default\"], {\n        role: \"button\"\n      })));\n    }\n  }, {\n    key: \"renderCopy\",\n    value: function renderCopy() {\n      var copied = this.state.copied;\n      var _this$props4 = this.props,\n          copyable = _this$props4.copyable,\n          prefixCls = _this$props4.prefixCls;\n      if (!copyable) return;\n      var title = copied ? this.copiedStr : this.copyStr;\n      return React.createElement(_tooltip[\"default\"], {\n        key: \"copy\",\n        title: title\n      }, React.createElement(_transButton[\"default\"], {\n        className: (0, _classnames[\"default\"])(\"\".concat(prefixCls, \"-copy\"), copied && \"\".concat(prefixCls, \"-copy-success\")),\n        onClick: this.onCopyClick,\n        \"aria-label\": title\n      }, copied ? React.createElement(_CheckOutlined[\"default\"], null) : React.createElement(_CopyOutlined[\"default\"], null)));\n    }\n  }, {\n    key: \"renderEditInput\",\n    value: function renderEditInput() {\n      var _this$props5 = this.props,\n          children = _this$props5.children,\n          prefixCls = _this$props5.prefixCls,\n          className = _this$props5.className,\n          style = _this$props5.style,\n          direction = _this$props5.direction;\n      return React.createElement(_Editable[\"default\"], {\n        value: typeof children === 'string' ? children : '',\n        onSave: this.onEditChange,\n        onCancel: this.onEditCancel,\n        prefixCls: prefixCls,\n        className: className,\n        style: style,\n        direction: direction\n      });\n    }\n  }, {\n    key: \"renderOperations\",\n    value: function renderOperations(forceRenderExpanded) {\n      return [this.renderExpand(forceRenderExpanded), this.renderEdit(), this.renderCopy()].filter(function (node) {\n        return node;\n      });\n    }\n  }, {\n    key: \"renderContent\",\n    value: function renderContent() {\n      var _this2 = this;\n\n      var _this$state3 = this.state,\n          ellipsisContent = _this$state3.ellipsisContent,\n          isEllipsis = _this$state3.isEllipsis,\n          expanded = _this$state3.expanded;\n\n      var _a = this.props,\n          component = _a.component,\n          children = _a.children,\n          className = _a.className,\n          prefixCls = _a.prefixCls,\n          type = _a.type,\n          disabled = _a.disabled,\n          style = _a.style,\n          title = _a.title,\n          restProps = __rest(_a, [\"component\", \"children\", \"className\", \"prefixCls\", \"type\", \"disabled\", \"style\", \"title\"]);\n\n      var _this$getEllipsis5 = this.getEllipsis(),\n          rows = _this$getEllipsis5.rows,\n          suffix = _this$getEllipsis5.suffix;\n\n      var textProps = (0, _omit[\"default\"])(restProps, ['prefixCls', 'editable', 'copyable', 'ellipsis', 'mark', 'underline', 'mark', 'code', 'delete', 'underline', 'strong'].concat(_toConsumableArray(_configProvider.configConsumerProps)));\n      var cssEllipsis = this.canUseCSSEllipsis();\n      var cssTextOverflow = rows === 1 && cssEllipsis;\n      var cssLineClamp = rows && rows > 1 && cssEllipsis;\n      var textNode = children;\n      var ariaLabel; // Only use js ellipsis when css ellipsis not support\n\n      if (rows && isEllipsis && !expanded && !cssEllipsis) {\n        ariaLabel = title;\n\n        if (!title && (typeof children === 'string' || typeof children === 'number')) {\n          ariaLabel = String(children);\n        } // We move full content to outer element to avoid repeat read the content by accessibility\n\n\n        textNode = React.createElement(\"span\", {\n          title: ariaLabel,\n          \"aria-hidden\": \"true\"\n        }, ellipsisContent, ELLIPSIS_STR, suffix);\n      } else {\n        textNode = React.createElement(React.Fragment, null, children, suffix);\n      }\n\n      textNode = wrapperDecorations(this.props, textNode);\n      return React.createElement(_LocaleReceiver[\"default\"], {\n        componentName: \"Text\"\n      }, function (_ref4) {\n        var _classNames;\n\n        var edit = _ref4.edit,\n            copyStr = _ref4.copy,\n            copied = _ref4.copied,\n            expand = _ref4.expand;\n        _this2.editStr = edit;\n        _this2.copyStr = copyStr;\n        _this2.copiedStr = copied;\n        _this2.expandStr = expand;\n        return React.createElement(_rcResizeObserver[\"default\"], {\n          onResize: _this2.resizeOnNextFrame,\n          disabled: !rows\n        }, React.createElement(_Typography[\"default\"], _extends({\n          className: (0, _classnames[\"default\"])(className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-\").concat(type), type), _defineProperty(_classNames, \"\".concat(prefixCls, \"-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(prefixCls, \"-ellipsis\"), rows), _defineProperty(_classNames, \"\".concat(prefixCls, \"-ellipsis-single-line\"), cssTextOverflow), _defineProperty(_classNames, \"\".concat(prefixCls, \"-ellipsis-multiple-line\"), cssLineClamp), _classNames)),\n          style: _extends(_extends({}, style), {\n            WebkitLineClamp: cssLineClamp ? rows : null\n          }),\n          component: component,\n          ref: _this2.setContentRef,\n          \"aria-label\": ariaLabel\n        }, textProps), textNode, _this2.renderOperations()));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$getEditable3 = this.getEditable(),\n          editing = _this$getEditable3.editing;\n\n      if (editing) {\n        return this.renderEditInput();\n      }\n\n      return this.renderContent();\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps) {\n      var children = nextProps.children,\n          editable = nextProps.editable;\n      (0, _warning[\"default\"])(!editable || typeof children === 'string', 'Typography', 'When `editable` is enabled, the `children` should use string.');\n      return {};\n    }\n  }]);\n\n  return Base;\n}(React.Component);\n\nBase.defaultProps = {\n  children: ''\n};\n\nvar _default = (0, _context.withConfigConsumer)({\n  prefixCls: 'typography'\n})(Base);\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["typography/Base.jsx"],"names":["__rest","t","Object","e","s","i","p","isLineClampSupport","isTextOverflowSupport","mark","code","underline","del","strong","currentContent","React","wrap","ELLIPSIS_STR","Base","Component","edit","copied","ellipsisText","ellipsisContent","isEllipsis","expanded","clientRendered","onExpand","onChange","children","copyable","copyConfig","String","onStart","raf","nextProps","editable","prevProps","ellipsis","prevEllipsis","window","props","editing","rows","expandable","suffix","content","text","forceRender","prefixCls","expandStr","editStr","title","className","style","direction","forceRenderExpanded","component","type","disabled","_a","restProps","textProps","configConsumerProps","cssEllipsis","cssTextOverflow","cssLineClamp","textNode","ariaLabel","wrapperDecorations","copy","copyStr","expand","WebkitLineClamp"],"mappings":"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","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport toArray from 'rc-util/lib/Children/toArray';\nimport findDOMNode from 'rc-util/lib/Dom/findDOMNode';\nimport copy from 'copy-to-clipboard';\nimport omit from 'omit.js';\nimport EditOutlined from '@ant-design/icons/EditOutlined';\nimport CheckOutlined from '@ant-design/icons/CheckOutlined';\nimport CopyOutlined from '@ant-design/icons/CopyOutlined';\nimport ResizeObserver from 'rc-resize-observer';\nimport { configConsumerProps } from '../config-provider';\nimport { withConfigConsumer } from '../config-provider/context';\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\nimport warning from '../_util/warning';\nimport TransButton from '../_util/transButton';\nimport raf from '../_util/raf';\nimport isStyleSupport from '../_util/styleChecker';\nimport Tooltip from '../tooltip';\nimport Typography from './Typography';\nimport Editable from './Editable';\nimport measure from './util';\nconst isLineClampSupport = isStyleSupport('webkitLineClamp');\nconst isTextOverflowSupport = isStyleSupport('textOverflow');\nfunction wrapperDecorations({ mark, code, underline, delete: del, strong }, content) {\n    let currentContent = content;\n    function wrap(needed, tag) {\n        if (!needed)\n            return;\n        currentContent = React.createElement(tag, {}, currentContent);\n    }\n    wrap(strong, 'strong');\n    wrap(underline, 'u');\n    wrap(del, 'del');\n    wrap(code, 'code');\n    wrap(mark, 'mark');\n    return currentContent;\n}\nconst ELLIPSIS_STR = '...';\nclass Base extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            edit: false,\n            copied: false,\n            ellipsisText: '',\n            ellipsisContent: null,\n            isEllipsis: false,\n            expanded: false,\n            clientRendered: false,\n        };\n        // =============== Expend ===============\n        this.onExpandClick = () => {\n            const { onExpand } = this.getEllipsis();\n            this.setState({ expanded: true });\n            if (onExpand) {\n                onExpand();\n            }\n        };\n        // ================ Edit ================\n        this.onEditClick = () => {\n            this.triggerEdit(true);\n        };\n        this.onEditChange = (value) => {\n            const { onChange } = this.getEditable();\n            if (onChange) {\n                onChange(value);\n            }\n            this.triggerEdit(false);\n        };\n        this.onEditCancel = () => {\n            this.triggerEdit(false);\n        };\n        // ================ Copy ================\n        this.onCopyClick = () => {\n            const { children, copyable } = this.props;\n            const copyConfig = Object.assign({}, (typeof copyable === 'object' ? copyable : null));\n            if (copyConfig.text === undefined) {\n                copyConfig.text = String(children);\n            }\n            copy(copyConfig.text || '');\n            this.setState({ copied: true }, () => {\n                if (copyConfig.onCopy) {\n                    copyConfig.onCopy();\n                }\n                this.copyId = window.setTimeout(() => {\n                    this.setState({ copied: false });\n                }, 3000);\n            });\n        };\n        this.setContentRef = (node) => {\n            this.content = node;\n        };\n        this.setEditRef = (node) => {\n            this.editIcon = node;\n        };\n        this.triggerEdit = (edit) => {\n            const { onStart } = this.getEditable();\n            if (edit && onStart) {\n                onStart();\n            }\n            this.setState({ edit }, () => {\n                if (!edit && this.editIcon) {\n                    this.editIcon.focus();\n                }\n            });\n        };\n        // ============== Ellipsis ==============\n        this.resizeOnNextFrame = () => {\n            raf.cancel(this.rafId);\n            this.rafId = raf(() => {\n                // Do not bind `syncEllipsis`. It need for test usage on prototype\n                this.syncEllipsis();\n            });\n        };\n    }\n    static getDerivedStateFromProps(nextProps) {\n        const { children, editable } = nextProps;\n        warning(!editable || typeof children === 'string', 'Typography', 'When `editable` is enabled, the `children` should use string.');\n        return {};\n    }\n    componentDidMount() {\n        this.setState({ clientRendered: true });\n        this.resizeOnNextFrame();\n    }\n    componentDidUpdate(prevProps) {\n        const { children } = this.props;\n        const ellipsis = this.getEllipsis();\n        const prevEllipsis = this.getEllipsis(prevProps);\n        if (children !== prevProps.children || ellipsis.rows !== prevEllipsis.rows) {\n            this.resizeOnNextFrame();\n        }\n    }\n    componentWillUnmount() {\n        window.clearTimeout(this.copyId);\n        raf.cancel(this.rafId);\n    }\n    getEditable(props) {\n        const { edit } = this.state;\n        const { editable } = props || this.props;\n        if (!editable)\n            return { editing: edit };\n        return Object.assign({ editing: edit }, (typeof editable === 'object' ? editable : null));\n    }\n    getEllipsis(props) {\n        const { ellipsis } = props || this.props;\n        if (!ellipsis)\n            return {};\n        return Object.assign({ rows: 1, expandable: false }, (typeof ellipsis === 'object' ? ellipsis : null));\n    }\n    canUseCSSEllipsis() {\n        const { clientRendered } = this.state;\n        const { editable, copyable } = this.props;\n        const { rows, expandable, suffix } = this.getEllipsis();\n        if (suffix)\n            return false;\n        // Can't use css ellipsis since we need to provide the place for button\n        if (editable || copyable || expandable || !clientRendered) {\n            return false;\n        }\n        if (rows === 1) {\n            return isTextOverflowSupport;\n        }\n        return isLineClampSupport;\n    }\n    syncEllipsis() {\n        const { ellipsisText, isEllipsis, expanded } = this.state;\n        const { rows, suffix } = this.getEllipsis();\n        const { children } = this.props;\n        if (!rows || rows < 0 || !this.content || expanded)\n            return;\n        // Do not measure if css already support ellipsis\n        if (this.canUseCSSEllipsis())\n            return;\n        warning(toArray(children).every((child) => typeof child === 'string'), 'Typography', '`ellipsis` should use string as children only.');\n        const { content, text, ellipsis } = measure(findDOMNode(this.content), { rows, suffix }, children, this.renderOperations(true), ELLIPSIS_STR);\n        if (ellipsisText !== text || isEllipsis !== ellipsis) {\n            this.setState({ ellipsisText: text, ellipsisContent: content, isEllipsis: ellipsis });\n        }\n    }\n    renderExpand(forceRender) {\n        const { expandable } = this.getEllipsis();\n        const { prefixCls } = this.props;\n        const { expanded, isEllipsis } = this.state;\n        if (!expandable)\n            return null;\n        // force render expand icon for measure usage or it will cause dead loop\n        if (!forceRender && (expanded || !isEllipsis))\n            return null;\n        return (<a key=\"expand\" className={`${prefixCls}-expand`} onClick={this.onExpandClick} aria-label={this.expandStr}>\n        {this.expandStr}\n      </a>);\n    }\n    renderEdit() {\n        const { editable, prefixCls } = this.props;\n        if (!editable)\n            return;\n        return (<Tooltip key=\"edit\" title={this.editStr}>\n        <TransButton ref={this.setEditRef} className={`${prefixCls}-edit`} onClick={this.onEditClick} aria-label={this.editStr}>\n          <EditOutlined role=\"button\"/>\n        </TransButton>\n      </Tooltip>);\n    }\n    renderCopy() {\n        const { copied } = this.state;\n        const { copyable, prefixCls } = this.props;\n        if (!copyable)\n            return;\n        const title = copied ? this.copiedStr : this.copyStr;\n        return (<Tooltip key=\"copy\" title={title}>\n        <TransButton className={classNames(`${prefixCls}-copy`, copied && `${prefixCls}-copy-success`)} onClick={this.onCopyClick} aria-label={title}>\n          {copied ? <CheckOutlined /> : <CopyOutlined />}\n        </TransButton>\n      </Tooltip>);\n    }\n    renderEditInput() {\n        const { children, prefixCls, className, style, direction } = this.props;\n        return (<Editable value={typeof children === 'string' ? children : ''} onSave={this.onEditChange} onCancel={this.onEditCancel} prefixCls={prefixCls} className={className} style={style} direction={direction}/>);\n    }\n    renderOperations(forceRenderExpanded) {\n        return [this.renderExpand(forceRenderExpanded), this.renderEdit(), this.renderCopy()].filter(node => node);\n    }\n    renderContent() {\n        const { ellipsisContent, isEllipsis, expanded } = this.state;\n        const _a = this.props, { component, children, className, prefixCls, type, disabled, style, title } = _a, restProps = __rest(_a, [\"component\", \"children\", \"className\", \"prefixCls\", \"type\", \"disabled\", \"style\", \"title\"]);\n        const { rows, suffix } = this.getEllipsis();\n        const textProps = omit(restProps, [\n            'prefixCls',\n            'editable',\n            'copyable',\n            'ellipsis',\n            'mark',\n            'underline',\n            'mark',\n            'code',\n            'delete',\n            'underline',\n            'strong',\n            ...configConsumerProps,\n        ]);\n        const cssEllipsis = this.canUseCSSEllipsis();\n        const cssTextOverflow = rows === 1 && cssEllipsis;\n        const cssLineClamp = rows && rows > 1 && cssEllipsis;\n        let textNode = children;\n        let ariaLabel;\n        // Only use js ellipsis when css ellipsis not support\n        if (rows && isEllipsis && !expanded && !cssEllipsis) {\n            ariaLabel = title;\n            if (!title && (typeof children === 'string' || typeof children === 'number')) {\n                ariaLabel = String(children);\n            }\n            // We move full content to outer element to avoid repeat read the content by accessibility\n            textNode = (<span title={ariaLabel} aria-hidden=\"true\">\n          {ellipsisContent}\n          {ELLIPSIS_STR}\n          {suffix}\n        </span>);\n        }\n        else {\n            textNode = (<>\n          {children}\n          {suffix}\n        </>);\n        }\n        textNode = wrapperDecorations(this.props, textNode);\n        return (<LocaleReceiver componentName=\"Text\">\n        {({ edit, copy: copyStr, copied, expand }) => {\n            this.editStr = edit;\n            this.copyStr = copyStr;\n            this.copiedStr = copied;\n            this.expandStr = expand;\n            return (<ResizeObserver onResize={this.resizeOnNextFrame} disabled={!rows}>\n              <Typography className={classNames(className, {\n                [`${prefixCls}-${type}`]: type,\n                [`${prefixCls}-disabled`]: disabled,\n                [`${prefixCls}-ellipsis`]: rows,\n                [`${prefixCls}-ellipsis-single-line`]: cssTextOverflow,\n                [`${prefixCls}-ellipsis-multiple-line`]: cssLineClamp,\n            })} style={Object.assign(Object.assign({}, style), { WebkitLineClamp: cssLineClamp ? rows : null })} component={component} ref={this.setContentRef} aria-label={ariaLabel} {...textProps}>\n                {textNode}\n                {this.renderOperations()}\n              </Typography>\n            </ResizeObserver>);\n        }}\n      </LocaleReceiver>);\n    }\n    render() {\n        const { editing } = this.getEditable();\n        if (editing) {\n            return this.renderEditInput();\n        }\n        return this.renderContent();\n    }\n}\nBase.defaultProps = {\n    children: '',\n};\nexport default withConfigConsumer({\n    prefixCls: 'typography',\n})(Base);\n"]},"metadata":{},"sourceType":"script"}