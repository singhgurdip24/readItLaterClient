{"ast":null,"code":"import{API_BASE_URL,POLL_LIST_SIZE,ACCESS_TOKEN}from'../constants';var request=function request(options){var headers=new Headers({'Content-Type':'application/json'});if(localStorage.getItem(ACCESS_TOKEN)){headers.append('Authorization','Bearer '+localStorage.getItem(ACCESS_TOKEN));}var defaults={headers:headers};options=Object.assign({},defaults,options);return fetch(options.url,options).then(function(response){return response.json().then(function(json){if(!response.ok){return Promise.reject(json);}return json;});});};export function getAllPolls(page,size){page=page||0;size=size||POLL_LIST_SIZE;return request({url:API_BASE_URL+\"/polls?page=\"+page+\"&size=\"+size,method:'GET'});}export function createPoll(pollData){return request({url:API_BASE_URL+\"/polls\",method:'POST',body:JSON.stringify(pollData)});}export function castVote(voteData){return request({url:API_BASE_URL+\"/polls/\"+voteData.pollId+\"/votes\",method:'POST',body:JSON.stringify(voteData)});}export function login(loginRequest){return request({url:API_BASE_URL+\"/auth/signin\",method:'POST',body:JSON.stringify(loginRequest)});}export function signup(signupRequest){return request({url:API_BASE_URL+\"/auth/signup\",method:'POST',body:JSON.stringify(signupRequest)});}export function checkUsernameAvailability(username){return request({url:API_BASE_URL+\"/user/checkUsernameAvailability?username=\"+username,method:'GET'});}export function checkEmailAvailability(email){return request({url:API_BASE_URL+\"/user/checkEmailAvailability?email=\"+email,method:'GET'});}export function getCurrentUser(){if(!localStorage.getItem(ACCESS_TOKEN)){return Promise.reject(\"No access token set.\");}return request({url:API_BASE_URL+\"/user/me\",method:'GET'});}export function getUserProfile(username){return request({url:API_BASE_URL+\"/users/\"+username,method:'GET'});}export function getUserCreatedPolls(username,page,size){page=page||0;size=size||POLL_LIST_SIZE;return request({url:API_BASE_URL+\"/users/\"+username+\"/polls?page=\"+page+\"&size=\"+size,method:'GET'});}export function getUserVotedPolls(username,page,size){page=page||0;size=size||POLL_LIST_SIZE;return request({url:API_BASE_URL+\"/users/\"+username+\"/votes?page=\"+page+\"&size=\"+size,method:'GET'});}","map":{"version":3,"sources":["/Users/gurdipsingh/git/polling-app-client/src/util/APIUtils.js"],"names":["API_BASE_URL","POLL_LIST_SIZE","ACCESS_TOKEN","request","options","headers","Headers","localStorage","getItem","append","defaults","Object","assign","fetch","url","then","response","json","ok","Promise","reject","getAllPolls","page","size","method","createPoll","pollData","body","JSON","stringify","castVote","voteData","pollId","login","loginRequest","signup","signupRequest","checkUsernameAvailability","username","checkEmailAvailability","email","getCurrentUser","getUserProfile","getUserCreatedPolls","getUserVotedPolls"],"mappings":"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","sourcesContent":["import { API_BASE_URL, POLL_LIST_SIZE, ACCESS_TOKEN } from '../constants';\n\nconst request = (options) => {\n    const headers = new Headers({\n        'Content-Type': 'application/json',\n    })\n    \n    if(localStorage.getItem(ACCESS_TOKEN)) {\n        headers.append('Authorization', 'Bearer ' + localStorage.getItem(ACCESS_TOKEN))\n    }\n\n    const defaults = {headers: headers};\n    options = Object.assign({}, defaults, options);\n\n    return fetch(options.url, options)\n    .then(response => \n        response.json().then(json => {\n            if(!response.ok) {\n                return Promise.reject(json);\n            }\n            return json;\n        })\n    );\n};\n\nexport function getAllPolls(page, size) {\n    page = page || 0;\n    size = size || POLL_LIST_SIZE;\n\n    return request({\n        url: API_BASE_URL + \"/polls?page=\" + page + \"&size=\" + size,\n        method: 'GET'\n    });\n}\n\nexport function createPoll(pollData) {\n    return request({\n        url: API_BASE_URL + \"/polls\",\n        method: 'POST',\n        body: JSON.stringify(pollData)         \n    });\n}\n\nexport function castVote(voteData) {\n    return request({\n        url: API_BASE_URL + \"/polls/\" + voteData.pollId + \"/votes\",\n        method: 'POST',\n        body: JSON.stringify(voteData)\n    });\n}\n\nexport function login(loginRequest) {\n    return request({\n        url: API_BASE_URL + \"/auth/signin\",\n        method: 'POST',\n        body: JSON.stringify(loginRequest)\n    });\n}\n\nexport function signup(signupRequest) {\n    return request({\n        url: API_BASE_URL + \"/auth/signup\",\n        method: 'POST',\n        body: JSON.stringify(signupRequest)\n    });\n}\n\nexport function checkUsernameAvailability(username) {\n    return request({\n        url: API_BASE_URL + \"/user/checkUsernameAvailability?username=\" + username,\n        method: 'GET'\n    });\n}\n\nexport function checkEmailAvailability(email) {\n    return request({\n        url: API_BASE_URL + \"/user/checkEmailAvailability?email=\" + email,\n        method: 'GET'\n    });\n}\n\n\nexport function getCurrentUser() {\n    if(!localStorage.getItem(ACCESS_TOKEN)) {\n        return Promise.reject(\"No access token set.\");\n    }\n\n    return request({\n        url: API_BASE_URL + \"/user/me\",\n        method: 'GET'\n    });\n}\n\nexport function getUserProfile(username) {\n    return request({\n        url: API_BASE_URL + \"/users/\" + username,\n        method: 'GET'\n    });\n}\n\nexport function getUserCreatedPolls(username, page, size) {\n    page = page || 0;\n    size = size || POLL_LIST_SIZE;\n\n    return request({\n        url: API_BASE_URL + \"/users/\" + username + \"/polls?page=\" + page + \"&size=\" + size,\n        method: 'GET'\n    });\n}\n\nexport function getUserVotedPolls(username, page, size) {\n    page = page || 0;\n    size = size || POLL_LIST_SIZE;\n\n    return request({\n        url: API_BASE_URL + \"/users/\" + username + \"/votes?page=\" + page + \"&size=\" + size,\n        method: 'GET'\n    });\n}"]},"metadata":{},"sourceType":"module"}