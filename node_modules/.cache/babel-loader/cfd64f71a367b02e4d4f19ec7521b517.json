{"ast":null,"code":"import \"antd/es/icon/style\";\nimport _Icon from \"antd/es/icon\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/avatar/style\";\nimport _Avatar from \"antd/es/avatar\";\nimport \"antd/es/radio/style\";\nimport _Radio from \"antd/es/radio\";\nvar _jsxFileName = \"/Users/gurdipsingh/git/polling-app-client/src/poll/Poll.js\";\nimport React, { Component } from 'react';\nimport './Poll.css';\nimport { Link } from 'react-router-dom';\nimport { getAvatarColor } from '../util/Colors';\nimport { formatDateTime } from '../util/Helpers';\nconst RadioGroup = _Radio.Group;\n\nclass Poll extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.calculatePercentage = choice => {\n      if (this.props.poll.totalVotes === 0) {\n        return 0;\n      }\n\n      return choice.voteCount * 100 / this.props.poll.totalVotes;\n    };\n\n    this.isSelected = choice => {\n      return this.props.poll.selectedChoice === choice.id;\n    };\n\n    this.getWinningChoice = () => {\n      return this.props.poll.choices.reduce((prevChoice, currentChoice) => currentChoice.voteCount > prevChoice.voteCount ? currentChoice : prevChoice, {\n        voteCount: -Infinity\n      });\n    };\n\n    this.getTimeRemaining = poll => {\n      const expirationTime = new Date(poll.expirationDateTime).getTime();\n      const currentTime = new Date().getTime();\n      var difference_ms = expirationTime - currentTime;\n      var seconds = Math.floor(difference_ms / 1000 % 60);\n      var minutes = Math.floor(difference_ms / 1000 / 60 % 60);\n      var hours = Math.floor(difference_ms / (1000 * 60 * 60) % 24);\n      var days = Math.floor(difference_ms / (1000 * 60 * 60 * 24));\n      let timeRemaining;\n\n      if (days > 0) {\n        timeRemaining = days + \" days left\";\n      } else if (hours > 0) {\n        timeRemaining = hours + \" hours left\";\n      } else if (minutes > 0) {\n        timeRemaining = minutes + \" minutes left\";\n      } else if (seconds > 0) {\n        timeRemaining = seconds + \" seconds left\";\n      } else {\n        timeRemaining = \"less than a second left\";\n      }\n\n      return timeRemaining;\n    };\n  }\n\n  render() {\n    const pollChoices = [];\n\n    if (this.props.poll.selectedChoice || this.props.poll.expired) {\n      const winningChoice = this.props.poll.expired ? this.getWinningChoice() : null;\n      this.props.poll.choices.forEach(choice => {\n        pollChoices.push(React.createElement(CompletedOrVotedPollChoice, {\n          key: choice.id,\n          choice: choice,\n          isWinner: winningChoice && choice.id === winningChoice.id,\n          isSelected: this.isSelected(choice),\n          percentVote: this.calculatePercentage(choice),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }));\n      });\n    } else {\n      this.props.poll.choices.forEach(choice => {\n        pollChoices.push(React.createElement(_Radio, {\n          className: \"poll-choice-radio\",\n          key: choice.id,\n          value: choice.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, choice.text));\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"poll-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"poll-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"poll-creator-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Link, {\n      className: \"creator-link\",\n      to: `/users/${this.props.poll.createdBy.username}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(_Avatar, {\n      className: \"poll-creator-avatar\",\n      style: {\n        backgroundColor: getAvatarColor(this.props.poll.createdBy.name)\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, this.props.poll.createdBy.name[0].toUpperCase()), React.createElement(\"span\", {\n      className: \"poll-creator-name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, this.props.poll.createdBy.name), React.createElement(\"span\", {\n      className: \"poll-creator-username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"@\", this.props.poll.createdBy.username), React.createElement(\"span\", {\n      className: \"poll-creation-date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, formatDateTime(this.props.poll.creationDateTime)))), React.createElement(\"div\", {\n      className: \"poll-question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, this.props.poll.question)), React.createElement(\"div\", {\n      className: \"poll-choices\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(RadioGroup, {\n      className: \"poll-choice-radio-group\",\n      onChange: this.props.handleVoteChange,\n      value: this.props.currentVote,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, pollChoices)), React.createElement(\"div\", {\n      className: \"poll-footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, !(this.props.poll.selectedChoice || this.props.poll.expired) ? React.createElement(_Button, {\n      className: \"vote-button\",\n      disabled: !this.props.currentVote,\n      onClick: this.props.handleVoteSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Vote\") : null, React.createElement(\"span\", {\n      className: \"total-votes\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, this.props.poll.totalVotes, \" votes\"), React.createElement(\"span\", {\n      className: \"separator\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"\\u2022\"), React.createElement(\"span\", {\n      className: \"time-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, this.props.poll.expired ? \"Final results\" : this.getTimeRemaining(this.props.poll))));\n  }\n\n}\n\nfunction CompletedOrVotedPollChoice(props) {\n  return React.createElement(\"div\", {\n    className: \"cv-poll-choice\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"cv-poll-choice-details\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"cv-choice-percentage\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, Math.round(props.percentVote * 100) / 100, \"%\"), React.createElement(\"span\", {\n    className: \"cv-choice-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, props.choice.text), props.isSelected ? React.createElement(_Icon, {\n    className: \"selected-choice-icon\",\n    type: \"check-circle-o\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }) : null), React.createElement(\"span\", {\n    className: props.isWinner ? 'cv-choice-percent-chart winner' : 'cv-choice-percent-chart',\n    style: {\n      width: props.percentVote + '%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }));\n}\n\nexport default Poll;","map":{"version":3,"sources":["/Users/gurdipsingh/git/polling-app-client/src/poll/Poll.js"],"names":["React","Component","Link","getAvatarColor","formatDateTime","RadioGroup","Group","Poll","calculatePercentage","choice","props","poll","totalVotes","voteCount","isSelected","selectedChoice","id","getWinningChoice","choices","reduce","prevChoice","currentChoice","Infinity","getTimeRemaining","expirationTime","Date","expirationDateTime","getTime","currentTime","difference_ms","seconds","Math","floor","minutes","hours","days","timeRemaining","render","pollChoices","expired","winningChoice","forEach","push","text","createdBy","username","backgroundColor","name","toUpperCase","creationDateTime","question","handleVoteChange","currentVote","handleVoteSubmit","CompletedOrVotedPollChoice","round","percentVote","isWinner","width"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Poll.css';\nimport { Avatar, Icon } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { getAvatarColor } from '../util/Colors';\nimport { formatDateTime } from '../util/Helpers';\n\nimport { Radio, Button } from 'antd';\nconst RadioGroup = Radio.Group;\n\nclass Poll extends Component {\n    calculatePercentage = (choice) => {\n        if(this.props.poll.totalVotes === 0) {\n            return 0;\n        }\n        return (choice.voteCount*100)/(this.props.poll.totalVotes);\n    };\n\n    isSelected = (choice) => {\n        return this.props.poll.selectedChoice === choice.id;\n    }\n\n    getWinningChoice = () => {\n        return this.props.poll.choices.reduce((prevChoice, currentChoice) => \n            currentChoice.voteCount > prevChoice.voteCount ? currentChoice : prevChoice, \n            {voteCount: -Infinity}\n        );\n    }\n\n    getTimeRemaining = (poll) => {\n        const expirationTime = new Date(poll.expirationDateTime).getTime();\n        const currentTime = new Date().getTime();\n    \n        var difference_ms = expirationTime - currentTime;\n        var seconds = Math.floor( (difference_ms/1000) % 60 );\n        var minutes = Math.floor( (difference_ms/1000/60) % 60 );\n        var hours = Math.floor( (difference_ms/(1000*60*60)) % 24 );\n        var days = Math.floor( difference_ms/(1000*60*60*24) );\n    \n        let timeRemaining;\n    \n        if(days > 0) {\n            timeRemaining = days + \" days left\";\n        } else if (hours > 0) {\n            timeRemaining = hours + \" hours left\";\n        } else if (minutes > 0) {\n            timeRemaining = minutes + \" minutes left\";\n        } else if(seconds > 0) {\n            timeRemaining = seconds + \" seconds left\";\n        } else {\n            timeRemaining = \"less than a second left\";\n        }\n        \n        return timeRemaining;\n    }\n\n    render() {\n        const pollChoices = [];\n        if(this.props.poll.selectedChoice || this.props.poll.expired) {\n            const winningChoice = this.props.poll.expired ? this.getWinningChoice() : null;\n\n            this.props.poll.choices.forEach(choice => {\n                pollChoices.push(<CompletedOrVotedPollChoice \n                    key={choice.id} \n                    choice={choice}\n                    isWinner={winningChoice && choice.id === winningChoice.id}\n                    isSelected={this.isSelected(choice)}\n                    percentVote={this.calculatePercentage(choice)} \n                />);\n            });                \n        } else {\n            this.props.poll.choices.forEach(choice => {\n                pollChoices.push(<Radio className=\"poll-choice-radio\" key={choice.id} value={choice.id}>{choice.text}</Radio>)\n            })    \n        }        \n        return (\n            <div className=\"poll-content\">\n                <div className=\"poll-header\">\n                    <div className=\"poll-creator-info\">\n                        <Link className=\"creator-link\" to={`/users/${this.props.poll.createdBy.username}`}>\n                            <Avatar className=\"poll-creator-avatar\" \n                                style={{ backgroundColor: getAvatarColor(this.props.poll.createdBy.name)}} >\n                                {this.props.poll.createdBy.name[0].toUpperCase()}\n                            </Avatar>\n                            <span className=\"poll-creator-name\">\n                                {this.props.poll.createdBy.name}\n                            </span>\n                            <span className=\"poll-creator-username\">\n                                @{this.props.poll.createdBy.username}\n                            </span>\n                            <span className=\"poll-creation-date\">\n                                {formatDateTime(this.props.poll.creationDateTime)}\n                            </span>\n                        </Link>\n                    </div>\n                    <div className=\"poll-question\">\n                        {this.props.poll.question}\n                    </div>\n                </div>\n                <div className=\"poll-choices\">\n                    <RadioGroup \n                        className=\"poll-choice-radio-group\" \n                        onChange={this.props.handleVoteChange} \n                        value={this.props.currentVote}>\n                        { pollChoices }\n                    </RadioGroup>\n                </div>\n                <div className=\"poll-footer\">\n                    { \n                        !(this.props.poll.selectedChoice || this.props.poll.expired) ?\n                        (<Button className=\"vote-button\" disabled={!this.props.currentVote} onClick={this.props.handleVoteSubmit}>Vote</Button>) : null \n                    }\n                    <span className=\"total-votes\">{this.props.poll.totalVotes} votes</span>\n                    <span className=\"separator\">•</span>\n                    <span className=\"time-left\">\n                        {\n                            this.props.poll.expired ? \"Final results\" :\n                            this.getTimeRemaining(this.props.poll)\n                        }\n                    </span>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction CompletedOrVotedPollChoice(props) {\n    return (\n        <div className=\"cv-poll-choice\">\n            <span className=\"cv-poll-choice-details\">\n                <span className=\"cv-choice-percentage\">\n                    {Math.round(props.percentVote * 100) / 100}%\n                </span>            \n                <span className=\"cv-choice-text\">\n                    {props.choice.text}\n                </span>\n                {\n                    props.isSelected ? (\n                    <Icon\n                        className=\"selected-choice-icon\"\n                        type=\"check-circle-o\"\n                    /> ): null\n                }    \n            </span>\n            <span className={props.isWinner ? 'cv-choice-percent-chart winner': 'cv-choice-percent-chart'} \n                style={{width: props.percentVote + '%' }}>\n            </span>\n        </div>\n    );\n}\n\n\nexport default Poll;"]},"metadata":{},"sourceType":"module"}