{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _toArray = _interopRequireDefault(require(\"rc-util/lib/Children/toArray\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _omit = _interopRequireDefault(require(\"omit.js\"));\n\nvar _select = _interopRequireDefault(require(\"../select\"));\n\nvar _configProvider = require(\"../config-provider\");\n\nvar _warning = _interopRequireDefault(require(\"../_util/warning\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar Option = _select[\"default\"].Option;\nvar InternalSelect = _select[\"default\"];\n\nfunction isSelectOptionOrSelectOptGroup(child) {\n  return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\n\nvar AutoComplete = function AutoComplete(props, ref) {\n  var customizePrefixCls = props.prefixCls,\n      className = props.className,\n      children = props.children,\n      dataSource = props.dataSource;\n  var childNodes = (0, _toArray[\"default\"])(children);\n  var selectRef = React.useRef();\n  React.useImperativeHandle(ref, function () {\n    return selectRef.current;\n  }); // ============================= Input =============================\n\n  var customizeInput;\n\n  if (childNodes.length === 1 && React.isValidElement(childNodes[0]) && !isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    customizeInput = childNodes[0];\n  }\n\n  var getInputElement = function getInputElement() {\n    return customizeInput;\n  }; // ============================ Options ============================\n\n\n  var optionChildren; // [Legacy] convert `children` or `dataSource` into option children\n\n  if (childNodes.length && isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    optionChildren = children;\n  } else {\n    optionChildren = dataSource ? dataSource.map(function (item) {\n      if (React.isValidElement(item)) {\n        return item;\n      }\n\n      switch (_typeof(item)) {\n        case 'string':\n          return React.createElement(Option, {\n            key: item,\n            value: item\n          }, item);\n\n        case 'object':\n          {\n            var optionValue = item.value;\n            return React.createElement(Option, {\n              key: optionValue,\n              value: optionValue\n            }, item.text);\n          }\n\n        default:\n          throw new Error('AutoComplete[dataSource] only supports type `string[] | Object[]`.');\n      }\n    }) : [];\n  } // ============================ Warning ============================\n\n\n  React.useEffect(function () {\n    (0, _warning[\"default\"])(!('dataSource' in props), 'AutoComplete', '`dataSource` is deprecated, please use `options` instead.');\n    (0, _warning[\"default\"])(!customizeInput || !('size' in props), 'AutoComplete', 'You need to control style self instead of setting `size` when using customize input.');\n  }, []);\n  return React.createElement(_configProvider.ConfigConsumer, null, function (_ref) {\n    var getPrefixCls = _ref.getPrefixCls;\n    var prefixCls = getPrefixCls('select', customizePrefixCls);\n    return React.createElement(InternalSelect, _extends({\n      ref: selectRef\n    }, (0, _omit[\"default\"])(props, ['dataSource']), {\n      prefixCls: prefixCls,\n      className: (0, _classnames[\"default\"])(className, \"\".concat(prefixCls, \"-auto-complete\")),\n      mode: _select[\"default\"].SECRET_COMBOBOX_MODE_DO_NOT_USE,\n      getInputElement: getInputElement\n    }), optionChildren);\n  });\n};\n\nvar RefAutoComplete = React.forwardRef(AutoComplete);\nRefAutoComplete.Option = Option;\nvar _default = RefAutoComplete;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["auto-complete/index.jsx"],"names":["Option","Select","InternalSelect","child","AutoComplete","customizePrefixCls","className","children","dataSource","props","childNodes","selectRef","React","isSelectOptionOrSelectOptGroup","customizeInput","getInputElement","optionChildren","item","optionValue","getPrefixCls","prefixCls","RefAutoComplete"],"mappings":"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","sourcesContent":["/**\n * TODO: 4.0\n * - remove `dataSource`\n * - `size` not work with customizeInput\n * - customizeInput not feedback `ENTER` key since accessibility enhancement\n */\nimport * as React from 'react';\nimport toArray from 'rc-util/lib/Children/toArray';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport Select from '../select';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\nconst { Option } = Select;\nconst InternalSelect = Select;\nfunction isSelectOptionOrSelectOptGroup(child) {\n    return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\nconst AutoComplete = (props, ref) => {\n    const { prefixCls: customizePrefixCls, className, children, dataSource } = props;\n    const childNodes = toArray(children);\n    const selectRef = React.useRef();\n    React.useImperativeHandle(ref, () => selectRef.current);\n    // ============================= Input =============================\n    let customizeInput;\n    if (childNodes.length === 1 &&\n        React.isValidElement(childNodes[0]) &&\n        !isSelectOptionOrSelectOptGroup(childNodes[0])) {\n        customizeInput = childNodes[0];\n    }\n    const getInputElement = () => customizeInput;\n    // ============================ Options ============================\n    let optionChildren;\n    // [Legacy] convert `children` or `dataSource` into option children\n    if (childNodes.length && isSelectOptionOrSelectOptGroup(childNodes[0])) {\n        optionChildren = children;\n    }\n    else {\n        optionChildren = dataSource\n            ? dataSource.map(item => {\n                if (React.isValidElement(item)) {\n                    return item;\n                }\n                switch (typeof item) {\n                    case 'string':\n                        return (<Option key={item} value={item}>\n                  {item}\n                </Option>);\n                    case 'object': {\n                        const { value: optionValue } = item;\n                        return (<Option key={optionValue} value={optionValue}>\n                  {item.text}\n                </Option>);\n                    }\n                    default:\n                        throw new Error('AutoComplete[dataSource] only supports type `string[] | Object[]`.');\n                }\n            })\n            : [];\n    }\n    // ============================ Warning ============================\n    React.useEffect(() => {\n        warning(!('dataSource' in props), 'AutoComplete', '`dataSource` is deprecated, please use `options` instead.');\n        warning(!customizeInput || !('size' in props), 'AutoComplete', 'You need to control style self instead of setting `size` when using customize input.');\n    }, []);\n    return (<ConfigConsumer>\n      {({ getPrefixCls }) => {\n        const prefixCls = getPrefixCls('select', customizePrefixCls);\n        return (<InternalSelect ref={selectRef} {...omit(props, ['dataSource'])} prefixCls={prefixCls} className={classNames(className, `${prefixCls}-auto-complete`)} mode={Select.SECRET_COMBOBOX_MODE_DO_NOT_USE} getInputElement={getInputElement}>\n            {optionChildren}\n          </InternalSelect>);\n    }}\n    </ConfigConsumer>);\n};\nconst RefAutoComplete = React.forwardRef(AutoComplete);\nRefAutoComplete.Option = Option;\nexport default RefAutoComplete;\n"]},"metadata":{},"sourceType":"script"}