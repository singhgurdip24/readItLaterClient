{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _rcMenu = _interopRequireWildcard(require(\"rc-menu\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _omit = _interopRequireDefault(require(\"omit.js\"));\n\nvar _SubMenu = _interopRequireDefault(require(\"./SubMenu\"));\n\nvar _MenuItem = _interopRequireDefault(require(\"./MenuItem\"));\n\nvar _configProvider = require(\"../config-provider\");\n\nvar _warning = _interopRequireDefault(require(\"../_util/warning\"));\n\nvar _Sider = require(\"../layout/Sider\");\n\nvar _raf = _interopRequireDefault(require(\"../_util/raf\"));\n\nvar _motion = _interopRequireDefault(require(\"../_util/motion\"));\n\nvar _MenuContext = _interopRequireDefault(require(\"./MenuContext\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar InternalMenu = /*#__PURE__*/function (_React$Component) {\n  _inherits(InternalMenu, _React$Component);\n\n  function InternalMenu(props) {\n    var _this;\n\n    _classCallCheck(this, InternalMenu);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InternalMenu).call(this, props)); // Restore vertical mode when menu is collapsed responsively when mounted\n    // https://github.com/ant-design/ant-design/issues/13104\n    // TODO: not a perfect solution, looking a new way to avoid setting switchingModeFromInline in this situation\n\n    _this.handleMouseEnter = function (e) {\n      _this.restoreModeVerticalFromInline();\n\n      var onMouseEnter = _this.props.onMouseEnter;\n\n      if (onMouseEnter) {\n        onMouseEnter(e);\n      }\n    };\n\n    _this.handleTransitionEnd = function (e) {\n      // when inlineCollapsed menu width animation finished\n      // https://github.com/ant-design/ant-design/issues/12864\n      var widthCollapsed = e.propertyName === 'width' && e.target === e.currentTarget; // Fix SVGElement e.target.className.indexOf is not a function\n      // https://github.com/ant-design/ant-design/issues/15699\n\n      var className = e.target.className; // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during an animation.\n\n      var classNameValue = Object.prototype.toString.call(className) === '[object SVGAnimatedString]' ? className.animVal : className; // Fix for <Menu style={{ width: '100%' }} />, the width transition won't trigger when menu is collapsed\n      // https://github.com/ant-design/ant-design-pro/issues/2783\n\n      var iconScaled = e.propertyName === 'font-size' && classNameValue.indexOf('anticon') >= 0;\n\n      if (widthCollapsed || iconScaled) {\n        _this.restoreModeVerticalFromInline();\n      }\n    };\n\n    _this.handleClick = function (e) {\n      _this.handleOpenChange([]);\n\n      var onClick = _this.props.onClick;\n\n      if (onClick) {\n        onClick(e);\n      }\n    };\n\n    _this.handleOpenChange = function (openKeys) {\n      _this.setOpenKeys(openKeys);\n\n      var onOpenChange = _this.props.onOpenChange;\n\n      if (onOpenChange) {\n        onOpenChange(openKeys);\n      }\n    };\n\n    _this.renderMenu = function (_ref) {\n      var getPopupContainer = _ref.getPopupContainer,\n          getPrefixCls = _ref.getPrefixCls,\n          direction = _ref.direction;\n      var _this$props = _this.props,\n          customizePrefixCls = _this$props.prefixCls,\n          className = _this$props.className,\n          theme = _this$props.theme,\n          collapsedWidth = _this$props.collapsedWidth;\n      var passProps = (0, _omit[\"default\"])(_this.props, ['collapsedWidth', 'siderCollapsed']);\n\n      var menuMode = _this.getRealMenuMode();\n\n      var menuOpenMotion = _this.getOpenMotionProps(menuMode);\n\n      var prefixCls = getPrefixCls('menu', customizePrefixCls);\n      var menuClassName = (0, _classnames[\"default\"])(className, \"\".concat(prefixCls, \"-\").concat(theme), _defineProperty({}, \"\".concat(prefixCls, \"-inline-collapsed\"), _this.getInlineCollapsed()));\n\n      var menuProps = _extends({\n        openKeys: _this.state.openKeys,\n        onOpenChange: _this.handleOpenChange,\n        className: menuClassName,\n        mode: menuMode\n      }, menuOpenMotion);\n\n      if (menuMode !== 'inline') {\n        // closing vertical popup submenu after click it\n        menuProps.onClick = _this.handleClick;\n      } // https://github.com/ant-design/ant-design/issues/8587\n\n\n      var hideMenu = _this.getInlineCollapsed() && (collapsedWidth === 0 || collapsedWidth === '0' || collapsedWidth === '0px');\n\n      if (hideMenu) {\n        menuProps.openKeys = [];\n      }\n\n      return React.createElement(_MenuContext[\"default\"].Provider, {\n        value: {\n          inlineCollapsed: _this.getInlineCollapsed() || false,\n          antdMenuTheme: _this.props.theme,\n          direction: direction\n        }\n      }, React.createElement(_rcMenu[\"default\"], _extends({\n        getPopupContainer: getPopupContainer\n      }, passProps, menuProps, {\n        prefixCls: prefixCls,\n        onTransitionEnd: _this.handleTransitionEnd,\n        onMouseEnter: _this.handleMouseEnter,\n        direction: direction\n      })));\n    };\n\n    (0, _warning[\"default\"])(!('inlineCollapsed' in props && props.mode !== 'inline'), 'Menu', '`inlineCollapsed` should only be used when `mode` is inline.');\n    (0, _warning[\"default\"])(!(props.siderCollapsed !== undefined && 'inlineCollapsed' in props), 'Menu', '`inlineCollapsed` not control Menu under Sider. Should set `collapsed` on Sider instead.');\n    var openKeys;\n\n    if ('openKeys' in props) {\n      openKeys = props.openKeys;\n    } else if ('defaultOpenKeys' in props) {\n      openKeys = props.defaultOpenKeys;\n    }\n\n    _this.state = {\n      openKeys: openKeys || [],\n      switchingModeFromInline: false,\n      inlineOpenKeys: [],\n      prevProps: props\n    };\n    return _this;\n  }\n\n  _createClass(InternalMenu, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      _raf[\"default\"].cancel(this.mountRafId);\n    }\n  }, {\n    key: \"setOpenKeys\",\n    value: function setOpenKeys(openKeys) {\n      if (!('openKeys' in this.props)) {\n        this.setState({\n          openKeys: openKeys\n        });\n      }\n    }\n  }, {\n    key: \"getRealMenuMode\",\n    value: function getRealMenuMode() {\n      var inlineCollapsed = this.getInlineCollapsed();\n\n      if (this.state.switchingModeFromInline && inlineCollapsed) {\n        return 'inline';\n      }\n\n      var mode = this.props.mode;\n      return inlineCollapsed ? 'vertical' : mode;\n    }\n  }, {\n    key: \"getInlineCollapsed\",\n    value: function getInlineCollapsed() {\n      var inlineCollapsed = this.props.inlineCollapsed;\n\n      if (this.props.siderCollapsed !== undefined) {\n        return this.props.siderCollapsed;\n      }\n\n      return inlineCollapsed;\n    }\n  }, {\n    key: \"getOpenMotionProps\",\n    value: function getOpenMotionProps(menuMode) {\n      var _this$props2 = this.props,\n          openTransitionName = _this$props2.openTransitionName,\n          openAnimation = _this$props2.openAnimation,\n          motion = _this$props2.motion; // Provides by user\n\n      if (motion) {\n        return {\n          motion: motion\n        };\n      }\n\n      if (openAnimation) {\n        (0, _warning[\"default\"])(typeof openAnimation === 'string', 'Menu', '`openAnimation` do not support object. Please use `motion` instead.');\n        return {\n          openAnimation: openAnimation\n        };\n      }\n\n      if (openTransitionName) {\n        return {\n          openTransitionName: openTransitionName\n        };\n      } // Default logic\n\n\n      if (menuMode === 'horizontal') {\n        return {\n          motion: {\n            motionName: 'slide-up'\n          }\n        };\n      }\n\n      if (menuMode === 'inline') {\n        return {\n          motion: _motion[\"default\"]\n        };\n      } // When mode switch from inline\n      // submenu should hide without animation\n\n\n      return {\n        motion: {\n          motionName: this.state.switchingModeFromInline ? '' : 'zoom-big'\n        }\n      };\n    }\n  }, {\n    key: \"restoreModeVerticalFromInline\",\n    value: function restoreModeVerticalFromInline() {\n      var switchingModeFromInline = this.state.switchingModeFromInline;\n\n      if (switchingModeFromInline) {\n        this.setState({\n          switchingModeFromInline: false\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(_configProvider.ConfigConsumer, null, this.renderMenu);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var prevProps = prevState.prevProps;\n      var newState = {\n        prevProps: nextProps\n      };\n\n      if (prevProps.mode === 'inline' && nextProps.mode !== 'inline') {\n        newState.switchingModeFromInline = true;\n      }\n\n      if ('openKeys' in nextProps) {\n        newState.openKeys = nextProps.openKeys;\n      } else {\n        // [Legacy] Old code will return after `openKeys` changed.\n        // Not sure the reason, we should keep this logic still.\n        if (nextProps.inlineCollapsed && !prevProps.inlineCollapsed || nextProps.siderCollapsed && !prevProps.siderCollapsed) {\n          newState.switchingModeFromInline = true;\n          newState.inlineOpenKeys = prevState.openKeys;\n          newState.openKeys = [];\n        }\n\n        if (!nextProps.inlineCollapsed && prevProps.inlineCollapsed || !nextProps.siderCollapsed && prevProps.siderCollapsed) {\n          newState.openKeys = prevState.inlineOpenKeys;\n          newState.inlineOpenKeys = [];\n        }\n      }\n\n      return newState;\n    }\n  }]);\n\n  return InternalMenu;\n}(React.Component);\n\nInternalMenu.defaultProps = {\n  className: '',\n  theme: 'light',\n  focusable: false\n}; // We should keep this as ref-able\n\nvar Menu = /*#__PURE__*/function (_React$Component2) {\n  _inherits(Menu, _React$Component2);\n\n  function Menu() {\n    _classCallCheck(this, Menu);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Menu).apply(this, arguments));\n  }\n\n  _createClass(Menu, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(_Sider.SiderContext.Consumer, null, function (context) {\n        return React.createElement(InternalMenu, _extends({}, _this2.props, context));\n      });\n    }\n  }]);\n\n  return Menu;\n}(React.Component);\n\nexports[\"default\"] = Menu;\nMenu.Divider = _rcMenu.Divider;\nMenu.Item = _MenuItem[\"default\"];\nMenu.SubMenu = _SubMenu[\"default\"];\nMenu.ItemGroup = _rcMenu.ItemGroup;","map":{"version":3,"sources":["menu/index.jsx"],"names":["InternalMenu","React","Component","onMouseEnter","widthCollapsed","e","className","classNameValue","Object","iconScaled","onClick","onOpenChange","getPopupContainer","getPrefixCls","direction","customizePrefixCls","theme","collapsedWidth","passProps","menuMode","menuOpenMotion","prefixCls","menuClassName","menuProps","openKeys","mode","hideMenu","inlineCollapsed","antdMenuTheme","props","switchingModeFromInline","inlineOpenKeys","prevProps","nextProps","prevState","newState","raf","openTransitionName","openAnimation","motion","motionName","collapseMotion","focusable","Menu","Divider","Item","SubMenu","ItemGroup"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport RcMenu, { Divider, ItemGroup } from 'rc-menu';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport SubMenu from './SubMenu';\nimport Item from './MenuItem';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\nimport { SiderContext } from '../layout/Sider';\nimport raf from '../_util/raf';\nimport collapseMotion from '../_util/motion';\nimport MenuContext from './MenuContext';\nclass InternalMenu extends React.Component {\n    constructor(props) {\n        super(props);\n        // Restore vertical mode when menu is collapsed responsively when mounted\n        // https://github.com/ant-design/ant-design/issues/13104\n        // TODO: not a perfect solution, looking a new way to avoid setting switchingModeFromInline in this situation\n        this.handleMouseEnter = (e) => {\n            this.restoreModeVerticalFromInline();\n            const { onMouseEnter } = this.props;\n            if (onMouseEnter) {\n                onMouseEnter(e);\n            }\n        };\n        this.handleTransitionEnd = (e) => {\n            // when inlineCollapsed menu width animation finished\n            // https://github.com/ant-design/ant-design/issues/12864\n            const widthCollapsed = e.propertyName === 'width' && e.target === e.currentTarget;\n            // Fix SVGElement e.target.className.indexOf is not a function\n            // https://github.com/ant-design/ant-design/issues/15699\n            const { className } = e.target;\n            // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during an animation.\n            const classNameValue = Object.prototype.toString.call(className) === '[object SVGAnimatedString]'\n                ? className.animVal\n                : className;\n            // Fix for <Menu style={{ width: '100%' }} />, the width transition won't trigger when menu is collapsed\n            // https://github.com/ant-design/ant-design-pro/issues/2783\n            const iconScaled = e.propertyName === 'font-size' && classNameValue.indexOf('anticon') >= 0;\n            if (widthCollapsed || iconScaled) {\n                this.restoreModeVerticalFromInline();\n            }\n        };\n        this.handleClick = (e) => {\n            this.handleOpenChange([]);\n            const { onClick } = this.props;\n            if (onClick) {\n                onClick(e);\n            }\n        };\n        this.handleOpenChange = (openKeys) => {\n            this.setOpenKeys(openKeys);\n            const { onOpenChange } = this.props;\n            if (onOpenChange) {\n                onOpenChange(openKeys);\n            }\n        };\n        this.renderMenu = ({ getPopupContainer, getPrefixCls, direction }) => {\n            const { prefixCls: customizePrefixCls, className, theme, collapsedWidth } = this.props;\n            const passProps = omit(this.props, ['collapsedWidth', 'siderCollapsed']);\n            const menuMode = this.getRealMenuMode();\n            const menuOpenMotion = this.getOpenMotionProps(menuMode);\n            const prefixCls = getPrefixCls('menu', customizePrefixCls);\n            const menuClassName = classNames(className, `${prefixCls}-${theme}`, {\n                [`${prefixCls}-inline-collapsed`]: this.getInlineCollapsed(),\n            });\n            const menuProps = Object.assign({ openKeys: this.state.openKeys, onOpenChange: this.handleOpenChange, className: menuClassName, mode: menuMode }, menuOpenMotion);\n            if (menuMode !== 'inline') {\n                // closing vertical popup submenu after click it\n                menuProps.onClick = this.handleClick;\n            }\n            // https://github.com/ant-design/ant-design/issues/8587\n            const hideMenu = this.getInlineCollapsed() &&\n                (collapsedWidth === 0 || collapsedWidth === '0' || collapsedWidth === '0px');\n            if (hideMenu) {\n                menuProps.openKeys = [];\n            }\n            return (<MenuContext.Provider value={{\n                inlineCollapsed: this.getInlineCollapsed() || false,\n                antdMenuTheme: this.props.theme,\n                direction,\n            }}>\n        <RcMenu getPopupContainer={getPopupContainer} {...passProps} {...menuProps} prefixCls={prefixCls} onTransitionEnd={this.handleTransitionEnd} onMouseEnter={this.handleMouseEnter} direction={direction}/>\n      </MenuContext.Provider>);\n        };\n        warning(!('inlineCollapsed' in props && props.mode !== 'inline'), 'Menu', '`inlineCollapsed` should only be used when `mode` is inline.');\n        warning(!(props.siderCollapsed !== undefined && 'inlineCollapsed' in props), 'Menu', '`inlineCollapsed` not control Menu under Sider. Should set `collapsed` on Sider instead.');\n        let openKeys;\n        if ('openKeys' in props) {\n            openKeys = props.openKeys;\n        }\n        else if ('defaultOpenKeys' in props) {\n            openKeys = props.defaultOpenKeys;\n        }\n        this.state = {\n            openKeys: openKeys || [],\n            switchingModeFromInline: false,\n            inlineOpenKeys: [],\n            prevProps: props,\n        };\n    }\n    static getDerivedStateFromProps(nextProps, prevState) {\n        const { prevProps } = prevState;\n        const newState = {\n            prevProps: nextProps,\n        };\n        if (prevProps.mode === 'inline' && nextProps.mode !== 'inline') {\n            newState.switchingModeFromInline = true;\n        }\n        if ('openKeys' in nextProps) {\n            newState.openKeys = nextProps.openKeys;\n        }\n        else {\n            // [Legacy] Old code will return after `openKeys` changed.\n            // Not sure the reason, we should keep this logic still.\n            if ((nextProps.inlineCollapsed && !prevProps.inlineCollapsed) ||\n                (nextProps.siderCollapsed && !prevProps.siderCollapsed)) {\n                newState.switchingModeFromInline = true;\n                newState.inlineOpenKeys = prevState.openKeys;\n                newState.openKeys = [];\n            }\n            if ((!nextProps.inlineCollapsed && prevProps.inlineCollapsed) ||\n                (!nextProps.siderCollapsed && prevProps.siderCollapsed)) {\n                newState.openKeys = prevState.inlineOpenKeys;\n                newState.inlineOpenKeys = [];\n            }\n        }\n        return newState;\n    }\n    componentWillUnmount() {\n        raf.cancel(this.mountRafId);\n    }\n    setOpenKeys(openKeys) {\n        if (!('openKeys' in this.props)) {\n            this.setState({ openKeys });\n        }\n    }\n    getRealMenuMode() {\n        const inlineCollapsed = this.getInlineCollapsed();\n        if (this.state.switchingModeFromInline && inlineCollapsed) {\n            return 'inline';\n        }\n        const { mode } = this.props;\n        return inlineCollapsed ? 'vertical' : mode;\n    }\n    getInlineCollapsed() {\n        const { inlineCollapsed } = this.props;\n        if (this.props.siderCollapsed !== undefined) {\n            return this.props.siderCollapsed;\n        }\n        return inlineCollapsed;\n    }\n    getOpenMotionProps(menuMode) {\n        const { openTransitionName, openAnimation, motion } = this.props;\n        // Provides by user\n        if (motion) {\n            return { motion };\n        }\n        if (openAnimation) {\n            warning(typeof openAnimation === 'string', 'Menu', '`openAnimation` do not support object. Please use `motion` instead.');\n            return { openAnimation };\n        }\n        if (openTransitionName) {\n            return { openTransitionName };\n        }\n        // Default logic\n        if (menuMode === 'horizontal') {\n            return { motion: { motionName: 'slide-up' } };\n        }\n        if (menuMode === 'inline') {\n            return { motion: collapseMotion };\n        }\n        // When mode switch from inline\n        // submenu should hide without animation\n        return {\n            motion: {\n                motionName: this.state.switchingModeFromInline ? '' : 'zoom-big',\n            },\n        };\n    }\n    restoreModeVerticalFromInline() {\n        const { switchingModeFromInline } = this.state;\n        if (switchingModeFromInline) {\n            this.setState({\n                switchingModeFromInline: false,\n            });\n        }\n    }\n    render() {\n        return <ConfigConsumer>{this.renderMenu}</ConfigConsumer>;\n    }\n}\nInternalMenu.defaultProps = {\n    className: '',\n    theme: 'light',\n    focusable: false,\n};\n// We should keep this as ref-able\nexport default class Menu extends React.Component {\n    render() {\n        return (<SiderContext.Consumer>\n        {(context) => <InternalMenu {...this.props} {...context}/>}\n      </SiderContext.Consumer>);\n    }\n}\nMenu.Divider = Divider;\nMenu.Item = Item;\nMenu.SubMenu = SubMenu;\nMenu.ItemGroup = ItemGroup;\n"]},"metadata":{},"sourceType":"script"}