{"ast":null,"code":"import \"antd/es/avatar/style\";\nimport _Avatar from \"antd/es/avatar\";\nimport \"antd/es/tabs/style\";\nimport _Tabs from \"antd/es/tabs\";\nvar _jsxFileName = \"/Users/gurdipsingh/git/polling-app-client/src/user/profile/Profile.js\";\nimport React, { Component } from 'react';\nimport PollList from '../../poll/PollList';\nimport { getUserProfile } from '../../util/APIUtils';\nimport { getAvatarColor } from '../../util/Colors';\nimport { formatDate } from '../../util/Helpers';\nimport LoadingIndicator from '../../common/LoadingIndicator';\nimport './Profile.css';\nimport NotFound from '../../common/NotFound';\nimport ServerError from '../../common/ServerError';\nconst TabPane = _Tabs.TabPane;\n\nclass Profile extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: null,\n      isLoading: false\n    };\n    this.loadUserProfile = this.loadUserProfile.bind(this);\n  }\n\n  loadUserProfile(username) {\n    this.setState({\n      isLoading: true\n    });\n    getUserProfile(username).then(response => {\n      this.setState({\n        user: response,\n        isLoading: false\n      });\n    }).catch(error => {\n      if (error.status === 404) {\n        this.setState({\n          notFound: true,\n          isLoading: false\n        });\n      } else {\n        this.setState({\n          serverError: true,\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  componentDidMount() {\n    const username = this.props.match.params.username;\n    this.loadUserProfile(username);\n  }\n\n  componentDidUpdate(nextProps) {\n    if (this.props.match.params.username !== nextProps.match.params.username) {\n      this.loadUserProfile(nextProps.match.params.username);\n    }\n  }\n\n  render() {\n    if (this.state.isLoading) {\n      return React.createElement(LoadingIndicator, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      });\n    }\n\n    if (this.state.notFound) {\n      return React.createElement(NotFound, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      });\n    }\n\n    if (this.state.serverError) {\n      return React.createElement(ServerError, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      });\n    }\n\n    const tabBarStyle = {\n      textAlign: 'center'\n    };\n    return React.createElement(\"div\", {\n      className: \"profile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, this.state.user ? React.createElement(\"div\", {\n      className: \"user-profile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"user-details\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"user-avatar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(_Avatar, {\n      className: \"user-avatar-circle\",\n      style: {\n        backgroundColor: getAvatarColor(this.state.user.name)\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, this.state.user.name[0].toUpperCase())), React.createElement(\"div\", {\n      className: \"user-summary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"full-name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, this.state.user.name), React.createElement(\"div\", {\n      className: \"username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"@\", this.state.user.username), React.createElement(\"div\", {\n      className: \"user-joined\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Joined \", formatDate(this.state.user.joinedAt)))), React.createElement(\"div\", {\n      className: \"user-poll-details\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(_Tabs, {\n      defaultActiveKey: \"1\",\n      animated: false,\n      tabBarStyle: tabBarStyle,\n      size: \"large\",\n      className: \"profile-tabs\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(TabPane, {\n      tab: `${this.state.user.pollCount} Polls`,\n      key: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(PollList, {\n      username: this.props.match.params.username,\n      type: \"USER_CREATED_POLLS\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    })), React.createElement(TabPane, {\n      tab: `${this.state.user.voteCount} Votes`,\n      key: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(PollList, {\n      username: this.props.match.params.username,\n      type: \"USER_VOTED_POLLS\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }))))) : null);\n  }\n\n}\n\nexport default Profile;","map":{"version":3,"sources":["/Users/gurdipsingh/git/polling-app-client/src/user/profile/Profile.js"],"names":["React","Component","PollList","getUserProfile","getAvatarColor","formatDate","LoadingIndicator","NotFound","ServerError","TabPane","Profile","constructor","props","state","user","isLoading","loadUserProfile","bind","username","setState","then","response","catch","error","status","notFound","serverError","componentDidMount","match","params","componentDidUpdate","nextProps","render","tabBarStyle","textAlign","backgroundColor","name","toUpperCase","joinedAt","pollCount","voteCount"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PollList from '../../poll/PollList';\nimport { getUserProfile } from '../../util/APIUtils';\nimport { Avatar, Tabs } from 'antd';\nimport { getAvatarColor } from '../../util/Colors';\nimport { formatDate } from '../../util/Helpers';\nimport LoadingIndicator  from '../../common/LoadingIndicator';\nimport './Profile.css';\nimport NotFound from '../../common/NotFound';\nimport ServerError from '../../common/ServerError';\n\nconst TabPane = Tabs.TabPane;\n\nclass Profile extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: null,\n            isLoading: false\n        }\n        this.loadUserProfile = this.loadUserProfile.bind(this);\n    }\n\n    loadUserProfile(username) {\n        this.setState({\n            isLoading: true\n        });\n\n        getUserProfile(username)\n        .then(response => {\n            this.setState({\n                user: response,\n                isLoading: false\n            });\n        }).catch(error => {\n            if(error.status === 404) {\n                this.setState({\n                    notFound: true,\n                    isLoading: false\n                });\n            } else {\n                this.setState({\n                    serverError: true,\n                    isLoading: false\n                });        \n            }\n        });        \n    }\n      \n    componentDidMount() {\n        const username = this.props.match.params.username;\n        this.loadUserProfile(username);\n    }\n\n    componentDidUpdate(nextProps) {\n        if(this.props.match.params.username !== nextProps.match.params.username) {\n            this.loadUserProfile(nextProps.match.params.username);\n        }        \n    }\n\n    render() {\n        if(this.state.isLoading) {\n            return <LoadingIndicator />;\n        }\n\n        if(this.state.notFound) {\n            return <NotFound />;\n        }\n\n        if(this.state.serverError) {\n            return <ServerError />;\n        }\n\n        const tabBarStyle = {\n            textAlign: 'center'\n        };\n\n        return (\n            <div className=\"profile\">\n                { \n                    this.state.user ? (\n                        <div className=\"user-profile\">\n                            <div className=\"user-details\">\n                                <div className=\"user-avatar\">\n                                    <Avatar className=\"user-avatar-circle\" style={{ backgroundColor: getAvatarColor(this.state.user.name)}}>\n                                        {this.state.user.name[0].toUpperCase()}\n                                    </Avatar>\n                                </div>\n                                <div className=\"user-summary\">\n                                    <div className=\"full-name\">{this.state.user.name}</div>\n                                    <div className=\"username\">@{this.state.user.username}</div>\n                                    <div className=\"user-joined\">\n                                        Joined {formatDate(this.state.user.joinedAt)}\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"user-poll-details\">    \n                                <Tabs defaultActiveKey=\"1\" \n                                    animated={false}\n                                    tabBarStyle={tabBarStyle}\n                                    size=\"large\"\n                                    className=\"profile-tabs\">\n                                    <TabPane tab={`${this.state.user.pollCount} Polls`} key=\"1\">\n                                        <PollList username={this.props.match.params.username} type=\"USER_CREATED_POLLS\" />\n                                    </TabPane>\n                                    <TabPane tab={`${this.state.user.voteCount} Votes`}  key=\"2\">\n                                        <PollList username={this.props.match.params.username} type=\"USER_VOTED_POLLS\" />\n                                    </TabPane>\n                                </Tabs>\n                            </div>  \n                        </div>  \n                    ): null               \n                }\n            </div>\n        );\n    }\n}\n\nexport default Profile;"]},"metadata":{},"sourceType":"module"}