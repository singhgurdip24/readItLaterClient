{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _checkbox = _interopRequireDefault(require(\"../checkbox\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar ListItem = function ListItem(props) {\n  var _classNames;\n\n  var renderedText = props.renderedText,\n      renderedEl = props.renderedEl,\n      item = props.item,\n      checked = props.checked,\n      disabled = props.disabled,\n      prefixCls = props.prefixCls,\n      onClick = props.onClick;\n  var className = (0, _classnames[\"default\"])((_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-content-item\"), true), _defineProperty(_classNames, \"\".concat(prefixCls, \"-content-item-disabled\"), disabled || item.disabled), _defineProperty(_classNames, \"\".concat(prefixCls, \"-content-item-checked\"), checked), _classNames));\n  var title;\n\n  if (typeof renderedText === 'string' || typeof renderedText === 'number') {\n    title = String(renderedText);\n  }\n\n  var listItem = React.createElement(\"li\", {\n    className: className,\n    title: title,\n    onClick: disabled || item.disabled ? undefined : function () {\n      return onClick(item);\n    }\n  }, React.createElement(_checkbox[\"default\"], {\n    checked: checked,\n    disabled: disabled || item.disabled\n  }), React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-content-item-text\")\n  }, renderedEl));\n  return listItem;\n};\n\nvar _default = React.memo(ListItem);\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["transfer/ListItem.jsx"],"names":["ListItem","renderedText","renderedEl","item","checked","disabled","prefixCls","onClick","props","className","title","String","listItem","React"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,WAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AACA,IAAA,SAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,aAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAAA,KAAA,EAAW;AAAA,MAAA,WAAA;;AAAA,MAChBC,YADgB,GAC0DO,KAD1D,CAAA,YAAA;AAAA,MACFN,UADE,GAC0DM,KAD1D,CAAA,UAAA;AAAA,MACUL,IADV,GAC0DK,KAD1D,CAAA,IAAA;AAAA,MACgBJ,OADhB,GAC0DI,KAD1D,CAAA,OAAA;AAAA,MACyBH,QADzB,GAC0DG,KAD1D,CAAA,QAAA;AAAA,MACmCF,SADnC,GAC0DE,KAD1D,CAAA,SAAA;AAAA,MAC8CD,OAD9C,GAC0DC,KAD1D,CAAA,OAAA;AAExB,MAAMC,SAAS,GAAG,CAAA,GAAA,WAAA,CAAA,SAAA,CAAA,GAAA,WAAA,GAAA,EAAA,EAAA,eAAA,CAAA,WAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,eAAA,CAAA,EAAA,IAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,wBAAA,CAAA,EAE0BJ,QAAQ,IAAIF,IAAI,CAF1C,QAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,uBAAA,CAAA,EAAA,OAAA,CAAA,EAAlB,WAAkB,EAAlB;AAKA,MAAA,KAAA;;AACA,MAAI,OAAA,YAAA,KAAA,QAAA,IAAoC,OAAA,YAAA,KAAxC,QAAA,EAA0E;AACtEO,IAAAA,KAAK,GAAGC,MAAM,CAAdD,YAAc,CAAdA;AACH;;AACD,MAAME,QAAQ,GAAI,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAI,IAAA,SAAS,EAAb,SAAA;AAA0B,IAAA,KAAK,EAA/B,KAAA;AAAwC,IAAA,OAAO,EAAEP,QAAQ,IAAIF,IAAI,CAAhBE,QAAAA,GAAAA,SAAAA,GAAwC,YAAA;AAAA,aAAME,OAAO,CAAb,IAAa,CAAb;AAAA;AAAzF,GAAA,EAChB,KAAA,CAAA,aAAA,CAAC,SAAA,CAAD,SAAC,CAAD,EAAA;AAAU,IAAA,OAAO,EAAjB,OAAA;AAA4B,IAAA,QAAQ,EAAEF,QAAQ,IAAIF,IAAI,CAACE;AAAvD,GAAA,CADgB,EAEhB,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,oBAAA;AAAf,GAAA,EAFF,UAEE,CAFgB,CAAlB;AAIA,SAAA,QAAA;AAfJ,CAAA;;eAiBeQ,KAAK,CAALA,IAAAA,CAAAA,QAAAA,C","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport Checkbox from '../checkbox';\nconst ListItem = (props) => {\n    const { renderedText, renderedEl, item, checked, disabled, prefixCls, onClick } = props;\n    const className = classNames({\n        [`${prefixCls}-content-item`]: true,\n        [`${prefixCls}-content-item-disabled`]: disabled || item.disabled,\n        [`${prefixCls}-content-item-checked`]: checked,\n    });\n    let title;\n    if (typeof renderedText === 'string' || typeof renderedText === 'number') {\n        title = String(renderedText);\n    }\n    const listItem = (<li className={className} title={title} onClick={disabled || item.disabled ? undefined : () => onClick(item)}>\n      <Checkbox checked={checked} disabled={disabled || item.disabled}/>\n      <span className={`${prefixCls}-content-item-text`}>{renderedEl}</span>\n    </li>);\n    return listItem;\n};\nexport default React.memo(ListItem);\n"]},"metadata":{},"sourceType":"script"}