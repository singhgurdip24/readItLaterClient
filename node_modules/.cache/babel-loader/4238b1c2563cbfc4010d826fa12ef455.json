{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getKey = getKey;\nexports.warningWithoutKey = warningWithoutKey;\nexports.convertTreeToData = convertTreeToData;\nexports.flattenTreeData = flattenTreeData;\nexports.traverseDataNodes = traverseDataNodes;\nexports.convertDataToEntities = convertDataToEntities;\nexports.getTreeNodeProps = getTreeNodeProps;\nexports.convertNodePropsToEventData = convertNodePropsToEventData;\n\nvar _toArray = _interopRequireDefault(require(\"rc-util/lib/Children/toArray\"));\n\nvar _warning = _interopRequireDefault(require(\"rc-util/lib/warning\"));\n\nvar _util = require(\"../util\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n\n  return pos;\n}\n/**\n * Warning if TreeNode do not provides key\n */\n\n\nfunction warningWithoutKey() {\n  var treeData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var keys = new Map();\n\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode.key,\n          children = treeNode.children;\n      (0, _warning.default)(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      (0, _warning.default)(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n\n  dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\n\n\nfunction convertTreeToData(rootNodes) {\n  function dig(node) {\n    var treeNodes = (0, _toArray.default)(node);\n    return treeNodes.map(function (treeNode) {\n      // Filter invalidate node\n      if (!(0, _util.isTreeNode)(treeNode)) {\n        (0, _warning.default)(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n\n      var key = treeNode.key;\n\n      var _treeNode$props = treeNode.props,\n          children = _treeNode$props.children,\n          rest = _objectWithoutProperties(_treeNode$props, [\"children\"]);\n\n      var dataNode = _objectSpread({\n        key: key\n      }, rest);\n\n      var parsedChildren = dig(children);\n\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n\n      return dataNode;\n    }).filter(function (dataNode) {\n      return dataNode;\n    });\n  }\n\n  return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\n\n\nfunction flattenTreeData() {\n  var treeNodeList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var expandedKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = (0, _util.getPosition)(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode.key, pos); // Add FlattenDataNode into list\n\n      var flattenNode = _objectSpread({}, treeNode, {\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat(_toConsumableArray(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat(_toConsumableArray(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n\n      flattenList.push(flattenNode); // Loop treeNode children\n\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode.children || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n\n      return flattenNode;\n    });\n  }\n\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\n\n\nfunction traverseDataNodes(dataNodes, callback) {\n  function processNode(node, index, parent) {\n    var children = node ? node.children : dataNodes;\n    var pos = node ? (0, _util.getPosition)(parent.pos, index) : '0'; // Process node if is not root\n\n    if (node) {\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: node.key !== null ? node.key : pos,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1\n      };\n      callback(data);\n    } // Process children node\n\n\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        });\n      });\n    }\n  }\n\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\n\n\nfunction convertDataToEntities(dataNodes) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      initWrapper = _ref.initWrapper,\n      processEntity = _ref.processEntity,\n      onProcessFinished = _ref.onProcessFinished;\n\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n        index = item.index,\n        pos = item.pos,\n        key = item.key,\n        parentPos = item.parentPos,\n        level = item.level;\n    var entity = {\n      node: node,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity; // Fill children\n\n    entity.parent = posEntities[parentPos];\n\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  });\n\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\n\n\nfunction getTreeNodeProps(key, _ref2) {\n  var expandedKeys = _ref2.expandedKeys,\n      selectedKeys = _ref2.selectedKeys,\n      loadedKeys = _ref2.loadedKeys,\n      loadingKeys = _ref2.loadingKeys,\n      checkedKeys = _ref2.checkedKeys,\n      halfCheckedKeys = _ref2.halfCheckedKeys,\n      dragOverNodeKey = _ref2.dragOverNodeKey,\n      dropPosition = _ref2.dropPosition,\n      keyEntities = _ref2.keyEntities;\n  var entity = keyEntities[key];\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeys.indexOf(key) !== -1,\n    selected: selectedKeys.indexOf(key) !== -1,\n    loaded: loadedKeys.indexOf(key) !== -1,\n    loading: loadingKeys.indexOf(key) !== -1,\n    checked: checkedKeys.indexOf(key) !== -1,\n    halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n    pos: String(entity ? entity.pos : ''),\n    // [Legacy] Drag props\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\n\nfunction convertNodePropsToEventData(props) {\n  var data = props.data,\n      expanded = props.expanded,\n      selected = props.selected,\n      checked = props.checked,\n      loaded = props.loaded,\n      loading = props.loading,\n      halfChecked = props.halfChecked,\n      dragOver = props.dragOver,\n      dragOverGapTop = props.dragOverGapTop,\n      dragOverGapBottom = props.dragOverGapBottom,\n      pos = props.pos,\n      active = props.active;\n\n  var eventData = _objectSpread({}, data, {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active\n  });\n\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        (0, _warning.default)(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n\n  return eventData;\n}","map":{"version":3,"sources":["/Users/gurdipsingh/git/polling-app-client/node_modules/rc-tree/lib/utils/treeUtil.js"],"names":["Object","defineProperty","exports","value","getKey","warningWithoutKey","convertTreeToData","flattenTreeData","traverseDataNodes","convertDataToEntities","getTreeNodeProps","convertNodePropsToEventData","_toArray","_interopRequireDefault","require","_warning","_util","obj","__esModule","default","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","TypeError","iter","Symbol","iterator","prototype","toString","call","Array","from","isArray","i","arr2","length","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","configurable","writable","_objectWithoutProperties","excluded","_objectWithoutPropertiesLoose","sourceSymbolKeys","indexOf","propertyIsEnumerable","sourceKeys","pos","undefined","treeData","Map","dig","list","path","treeNode","children","concat","recordKey","String","has","set","rootNodes","node","treeNodes","map","isTreeNode","_treeNode$props","props","rest","dataNode","parsedChildren","treeNodeList","expandedKeys","expandedKeySet","Set","flattenList","parent","index","getPosition","mergedKey","flattenNode","data","isStart","isEnd","dataNodes","callback","processNode","parentPos","level","subNode","subIndex","_ref","initWrapper","processEntity","onProcessFinished","posEntities","keyEntities","wrapper","item","entity","_ref2","selectedKeys","loadedKeys","loadingKeys","checkedKeys","halfCheckedKeys","dragOverNodeKey","dropPosition","treeNodeProps","eventKey","expanded","selected","loaded","loading","checked","halfChecked","dragOver","dragOverGapTop","dragOverGapBottom","active","eventData","get"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getKey = getKey;\nexports.warningWithoutKey = warningWithoutKey;\nexports.convertTreeToData = convertTreeToData;\nexports.flattenTreeData = flattenTreeData;\nexports.traverseDataNodes = traverseDataNodes;\nexports.convertDataToEntities = convertDataToEntities;\nexports.getTreeNodeProps = getTreeNodeProps;\nexports.convertNodePropsToEventData = convertNodePropsToEventData;\n\nvar _toArray = _interopRequireDefault(require(\"rc-util/lib/Children/toArray\"));\n\nvar _warning = _interopRequireDefault(require(\"rc-util/lib/warning\"));\n\nvar _util = require(\"../util\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n\n  return pos;\n}\n/**\n * Warning if TreeNode do not provides key\n */\n\n\nfunction warningWithoutKey() {\n  var treeData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var keys = new Map();\n\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode.key,\n          children = treeNode.children;\n      (0, _warning.default)(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      (0, _warning.default)(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n\n  dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\n\n\nfunction convertTreeToData(rootNodes) {\n  function dig(node) {\n    var treeNodes = (0, _toArray.default)(node);\n    return treeNodes.map(function (treeNode) {\n      // Filter invalidate node\n      if (!(0, _util.isTreeNode)(treeNode)) {\n        (0, _warning.default)(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n\n      var key = treeNode.key;\n\n      var _treeNode$props = treeNode.props,\n          children = _treeNode$props.children,\n          rest = _objectWithoutProperties(_treeNode$props, [\"children\"]);\n\n      var dataNode = _objectSpread({\n        key: key\n      }, rest);\n\n      var parsedChildren = dig(children);\n\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n\n      return dataNode;\n    }).filter(function (dataNode) {\n      return dataNode;\n    });\n  }\n\n  return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\n\n\nfunction flattenTreeData() {\n  var treeNodeList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var expandedKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = (0, _util.getPosition)(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode.key, pos); // Add FlattenDataNode into list\n\n      var flattenNode = _objectSpread({}, treeNode, {\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat(_toConsumableArray(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat(_toConsumableArray(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n\n      flattenList.push(flattenNode); // Loop treeNode children\n\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode.children || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n\n      return flattenNode;\n    });\n  }\n\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\n\n\nfunction traverseDataNodes(dataNodes, callback) {\n  function processNode(node, index, parent) {\n    var children = node ? node.children : dataNodes;\n    var pos = node ? (0, _util.getPosition)(parent.pos, index) : '0'; // Process node if is not root\n\n    if (node) {\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: node.key !== null ? node.key : pos,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1\n      };\n      callback(data);\n    } // Process children node\n\n\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        });\n      });\n    }\n  }\n\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\n\n\nfunction convertDataToEntities(dataNodes) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      initWrapper = _ref.initWrapper,\n      processEntity = _ref.processEntity,\n      onProcessFinished = _ref.onProcessFinished;\n\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n        index = item.index,\n        pos = item.pos,\n        key = item.key,\n        parentPos = item.parentPos,\n        level = item.level;\n    var entity = {\n      node: node,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity; // Fill children\n\n    entity.parent = posEntities[parentPos];\n\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  });\n\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\n\n\nfunction getTreeNodeProps(key, _ref2) {\n  var expandedKeys = _ref2.expandedKeys,\n      selectedKeys = _ref2.selectedKeys,\n      loadedKeys = _ref2.loadedKeys,\n      loadingKeys = _ref2.loadingKeys,\n      checkedKeys = _ref2.checkedKeys,\n      halfCheckedKeys = _ref2.halfCheckedKeys,\n      dragOverNodeKey = _ref2.dragOverNodeKey,\n      dropPosition = _ref2.dropPosition,\n      keyEntities = _ref2.keyEntities;\n  var entity = keyEntities[key];\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeys.indexOf(key) !== -1,\n    selected: selectedKeys.indexOf(key) !== -1,\n    loaded: loadedKeys.indexOf(key) !== -1,\n    loading: loadingKeys.indexOf(key) !== -1,\n    checked: checkedKeys.indexOf(key) !== -1,\n    halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n    pos: String(entity ? entity.pos : ''),\n    // [Legacy] Drag props\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\n\nfunction convertNodePropsToEventData(props) {\n  var data = props.data,\n      expanded = props.expanded,\n      selected = props.selected,\n      checked = props.checked,\n      loaded = props.loaded,\n      loading = props.loading,\n      halfChecked = props.halfChecked,\n      dragOver = props.dragOver,\n      dragOverGapTop = props.dragOverGapTop,\n      dragOverGapBottom = props.dragOverGapBottom,\n      pos = props.pos,\n      active = props.active;\n\n  var eventData = _objectSpread({}, data, {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active\n  });\n\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        (0, _warning.default)(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n\n  return eventData;\n}"]},"metadata":{},"sourceType":"script"}