{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = useTitleColumns;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _util = require(\"../util\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction fillTitle(columns, columnTitleProps) {\n  return columns.map(function (column) {\n    var cloneColumn = _extends({}, column);\n\n    cloneColumn.title = (0, _util.renderColumnTitle)(column.title, columnTitleProps);\n\n    if ('children' in cloneColumn) {\n      cloneColumn.children = fillTitle(cloneColumn.children, columnTitleProps);\n    }\n\n    return cloneColumn;\n  });\n}\n\nfunction useTitleColumns(columnTitleProps) {\n  var filledColumns = React.useCallback(function (columns) {\n    return fillTitle(columns, columnTitleProps);\n  }, [columnTitleProps]);\n  return [filledColumns];\n}","map":{"version":3,"sources":["table/hooks/useTitleColumns.jsx"],"names":["cloneColumn","column","fillTitle","filledColumns"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAA,SAAA,CAAA,OAAA,EAAA,gBAAA,EAA8C;AAC1C,SAAO,OAAO,CAAP,GAAA,CAAY,UAAA,MAAA,EAAU;AACzB,QAAMA,WAAW,GAAG,QAAA,CAAA,EAAA,EAApB,MAAoB,CAApB;;AACAA,IAAAA,WAAW,CAAXA,KAAAA,GAAoB,CAAA,GAAA,KAAA,CAAA,iBAAA,EAAkBC,MAAM,CAAxB,KAAA,EAApBD,gBAAoB,CAApBA;;AACA,QAAI,cAAJ,WAAA,EAA+B;AAC3BA,MAAAA,WAAW,CAAXA,QAAAA,GAAuBE,SAAS,CAACF,WAAW,CAAZ,QAAA,EAAhCA,gBAAgC,CAAhCA;AACH;;AACD,WAAA,WAAA;AANJ,GAAO,CAAP;AAQH;;AACc,SAAA,eAAA,CAAA,gBAAA,EAA2C;AACtD,MAAMG,aAAa,GAAG,KAAK,CAAL,WAAA,CAAkB,UAAA,OAAA,EAAA;AAAA,WAAaD,SAAS,CAAA,OAAA,EAAtB,gBAAsB,CAAtB;AAAlB,GAAA,EAAqE,CAA3F,gBAA2F,CAArE,CAAtB;AACA,SAAO,CAAP,aAAO,CAAP;AACH","sourcesContent":["import * as React from 'react';\nimport { renderColumnTitle } from '../util';\nfunction fillTitle(columns, columnTitleProps) {\n    return columns.map(column => {\n        const cloneColumn = Object.assign({}, column);\n        cloneColumn.title = renderColumnTitle(column.title, columnTitleProps);\n        if ('children' in cloneColumn) {\n            cloneColumn.children = fillTitle(cloneColumn.children, columnTitleProps);\n        }\n        return cloneColumn;\n    });\n}\nexport default function useTitleColumns(columnTitleProps) {\n    const filledColumns = React.useCallback((columns) => fillTitle(columns, columnTitleProps), [columnTitleProps]);\n    return [filledColumns];\n}\n"]},"metadata":{},"sourceType":"script"}