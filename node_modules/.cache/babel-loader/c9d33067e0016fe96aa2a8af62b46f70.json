{"ast":null,"code":"import { API_BASE_URL, POLL_LIST_SIZE, ACCESS_TOKEN } from '../constants';\n\nconst request = options => {\n  const headers = new Headers({\n    'Content-Type': 'application/json'\n  });\n\n  if (localStorage.getItem(ACCESS_TOKEN)) {\n    headers.append('Authorization', 'Bearer ' + localStorage.getItem(ACCESS_TOKEN));\n  }\n\n  const defaults = {\n    headers: headers\n  };\n  options = Object.assign({}, defaults, options);\n  return fetch(options.url, options).then(response => response.json().then(json => {\n    if (!response.ok) {\n      return Promise.reject(json);\n    }\n\n    return json;\n  }));\n};\n\nexport function getAllPolls(page, size) {\n  page = page || 0;\n  size = size || POLL_LIST_SIZE;\n  return request({\n    url: API_BASE_URL + \"/polls?page=\" + page + \"&size=\" + size,\n    method: 'GET'\n  });\n}\nexport function createPoll(pollData) {\n  return request({\n    url: API_BASE_URL + \"/polls\",\n    method: 'POST',\n    body: JSON.stringify(pollData)\n  });\n}\nexport function castVote(voteData) {\n  return request({\n    url: API_BASE_URL + \"/polls/\" + voteData.pollId + \"/votes\",\n    method: 'POST',\n    body: JSON.stringify(voteData)\n  });\n}\nexport function login(loginRequest) {\n  return request({\n    url: API_BASE_URL + \"/auth/signin\",\n    method: 'POST',\n    body: JSON.stringify(loginRequest)\n  });\n}\nexport function signup(signupRequest) {\n  return request({\n    url: API_BASE_URL + \"/auth/signup\",\n    method: 'POST',\n    body: JSON.stringify(signupRequest)\n  });\n}\nexport function checkUsernameAvailability(username) {\n  return request({\n    url: API_BASE_URL + \"/user/checkUsernameAvailability?username=\" + username,\n    method: 'GET'\n  });\n}\nexport function checkEmailAvailability(email) {\n  return request({\n    url: API_BASE_URL + \"/user/checkEmailAvailability?email=\" + email,\n    method: 'GET'\n  });\n}\nexport function getCurrentUser() {\n  if (!localStorage.getItem(ACCESS_TOKEN)) {\n    return Promise.reject(\"No access token set.\");\n  }\n\n  return request({\n    url: API_BASE_URL + \"/user/me\",\n    method: 'GET'\n  });\n}\nexport function getUserProfile(username) {\n  return request({\n    url: API_BASE_URL + \"/users/\" + username,\n    method: 'GET'\n  });\n}\nexport function getUserCreatedPolls(username, page, size) {\n  page = page || 0;\n  size = size || POLL_LIST_SIZE;\n  return request({\n    url: API_BASE_URL + \"/users/\" + username + \"/polls?page=\" + page + \"&size=\" + size,\n    method: 'GET'\n  });\n}\nexport function getUserVotedPolls(username, page, size) {\n  page = page || 0;\n  size = size || POLL_LIST_SIZE;\n  return request({\n    url: API_BASE_URL + \"/users/\" + username + \"/votes?page=\" + page + \"&size=\" + size,\n    method: 'GET'\n  });\n}","map":{"version":3,"sources":["/Users/gurdipsingh/git/polling-app-client/src/util/APIUtils.js"],"names":["API_BASE_URL","POLL_LIST_SIZE","ACCESS_TOKEN","request","options","headers","Headers","localStorage","getItem","append","defaults","Object","assign","fetch","url","then","response","json","ok","Promise","reject","getAllPolls","page","size","method","createPoll","pollData","body","JSON","stringify","castVote","voteData","pollId","login","loginRequest","signup","signupRequest","checkUsernameAvailability","username","checkEmailAvailability","email","getCurrentUser","getUserProfile","getUserCreatedPolls","getUserVotedPolls"],"mappings":"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","sourcesContent":["import { API_BASE_URL, POLL_LIST_SIZE, ACCESS_TOKEN } from '../constants';\n\nconst request = (options) => {\n    const headers = new Headers({\n        'Content-Type': 'application/json',\n    })\n    \n    if(localStorage.getItem(ACCESS_TOKEN)) {\n        headers.append('Authorization', 'Bearer ' + localStorage.getItem(ACCESS_TOKEN))\n    }\n\n    const defaults = {headers: headers};\n    options = Object.assign({}, defaults, options);\n\n    return fetch(options.url, options)\n    .then(response => \n        response.json().then(json => {\n            if(!response.ok) {\n                return Promise.reject(json);\n            }\n            return json;\n        })\n    );\n};\n\nexport function getAllPolls(page, size) {\n    page = page || 0;\n    size = size || POLL_LIST_SIZE;\n\n    return request({\n        url: API_BASE_URL + \"/polls?page=\" + page + \"&size=\" + size,\n        method: 'GET'\n    });\n}\n\nexport function createPoll(pollData) {\n    return request({\n        url: API_BASE_URL + \"/polls\",\n        method: 'POST',\n        body: JSON.stringify(pollData)         \n    });\n}\n\nexport function castVote(voteData) {\n    return request({\n        url: API_BASE_URL + \"/polls/\" + voteData.pollId + \"/votes\",\n        method: 'POST',\n        body: JSON.stringify(voteData)\n    });\n}\n\nexport function login(loginRequest) {\n    return request({\n        url: API_BASE_URL + \"/auth/signin\",\n        method: 'POST',\n        body: JSON.stringify(loginRequest)\n    });\n}\n\nexport function signup(signupRequest) {\n    return request({\n        url: API_BASE_URL + \"/auth/signup\",\n        method: 'POST',\n        body: JSON.stringify(signupRequest)\n    });\n}\n\nexport function checkUsernameAvailability(username) {\n    return request({\n        url: API_BASE_URL + \"/user/checkUsernameAvailability?username=\" + username,\n        method: 'GET'\n    });\n}\n\nexport function checkEmailAvailability(email) {\n    return request({\n        url: API_BASE_URL + \"/user/checkEmailAvailability?email=\" + email,\n        method: 'GET'\n    });\n}\n\n\nexport function getCurrentUser() {\n    if(!localStorage.getItem(ACCESS_TOKEN)) {\n        return Promise.reject(\"No access token set.\");\n    }\n\n    return request({\n        url: API_BASE_URL + \"/user/me\",\n        method: 'GET'\n    });\n}\n\nexport function getUserProfile(username) {\n    return request({\n        url: API_BASE_URL + \"/users/\" + username,\n        method: 'GET'\n    });\n}\n\nexport function getUserCreatedPolls(username, page, size) {\n    page = page || 0;\n    size = size || POLL_LIST_SIZE;\n\n    return request({\n        url: API_BASE_URL + \"/users/\" + username + \"/polls?page=\" + page + \"&size=\" + size,\n        method: 'GET'\n    });\n}\n\nexport function getUserVotedPolls(username, page, size) {\n    page = page || 0;\n    size = size || POLL_LIST_SIZE;\n\n    return request({\n        url: API_BASE_URL + \"/users/\" + username + \"/votes?page=\" + page + \"&size=\" + size,\n        method: 'GET'\n    });\n}"]},"metadata":{},"sourceType":"module"}