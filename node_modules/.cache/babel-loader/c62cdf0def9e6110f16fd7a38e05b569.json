{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"TreeNode\", {\n  enumerable: true,\n  get: function get() {\n    return _rcTreeSelect.TreeNode;\n  }\n});\nexports[\"default\"] = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _rcTreeSelect = _interopRequireWildcard(require(\"rc-tree-select\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _omit = _interopRequireDefault(require(\"omit.js\"));\n\nvar _configProvider = require(\"../config-provider\");\n\nvar _warning = _interopRequireDefault(require(\"../_util/warning\"));\n\nvar _iconUtil = _interopRequireDefault(require(\"../select/utils/iconUtil\"));\n\nvar _iconUtil2 = _interopRequireDefault(require(\"../tree/utils/iconUtil\"));\n\nvar _SizeContext = _interopRequireDefault(require(\"../config-provider/SizeContext\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar TreeSelect = /*#__PURE__*/function (_React$Component) {\n  _inherits(TreeSelect, _React$Component);\n\n  function TreeSelect(props) {\n    var _this;\n\n    _classCallCheck(this, TreeSelect);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TreeSelect).call(this, props));\n    _this.selectRef = React.createRef();\n\n    _this.renderTreeSelect = function (_ref) {\n      var getContextPopupContainer = _ref.getPopupContainer,\n          getPrefixCls = _ref.getPrefixCls,\n          renderEmpty = _ref.renderEmpty,\n          direction = _ref.direction;\n      var _this$props = _this.props,\n          customizePrefixCls = _this$props.prefixCls,\n          customizeSize = _this$props.size,\n          className = _this$props.className,\n          treeCheckable = _this$props.treeCheckable,\n          multiple = _this$props.multiple,\n          _this$props$listHeigh = _this$props.listHeight,\n          listHeight = _this$props$listHeigh === void 0 ? 256 : _this$props$listHeigh,\n          _this$props$listItemH = _this$props.listItemHeight,\n          listItemHeight = _this$props$listItemH === void 0 ? 32 : _this$props$listItemH,\n          notFoundContent = _this$props.notFoundContent,\n          _switcherIcon = _this$props.switcherIcon,\n          treeLine = _this$props.treeLine,\n          getPopupContainer = _this$props.getPopupContainer,\n          dropdownClassName = _this$props.dropdownClassName,\n          bordered = _this$props.bordered;\n      var prefixCls = getPrefixCls('select', customizePrefixCls);\n      var treePrefixCls = getPrefixCls('select-tree', customizePrefixCls);\n      var treeSelectPrefixCls = getPrefixCls('tree-select', customizePrefixCls);\n      var mergedDropdownClassName = (0, _classnames[\"default\"])(dropdownClassName, \"\".concat(treeSelectPrefixCls, \"-dropdown\"), _defineProperty({}, \"\".concat(treeSelectPrefixCls, \"-dropdown-rtl\"), direction === 'rtl'));\n      var isMultiple = !!(treeCheckable || multiple); // ===================== Icons =====================\n\n      var _getIcons = (0, _iconUtil[\"default\"])(_extends(_extends({}, _this.props), {\n        multiple: isMultiple\n      })),\n          suffixIcon = _getIcons.suffixIcon,\n          itemIcon = _getIcons.itemIcon,\n          removeIcon = _getIcons.removeIcon,\n          clearIcon = _getIcons.clearIcon; // ===================== Empty =====================\n\n\n      var mergedNotFound;\n\n      if (notFoundContent !== undefined) {\n        mergedNotFound = notFoundContent;\n      } else {\n        mergedNotFound = renderEmpty('Select');\n      } // ==================== Render =====================\n\n\n      var selectProps = (0, _omit[\"default\"])(_this.props, ['prefixCls', 'suffixIcon', 'itemIcon', 'removeIcon', 'clearIcon', 'switcherIcon', 'size', 'bordered']);\n      return React.createElement(_SizeContext[\"default\"].Consumer, null, function (size) {\n        var _classNames2;\n\n        var mergedSize = customizeSize || size;\n        var mergedClassName = (0, _classnames[\"default\"])(!customizePrefixCls && treeSelectPrefixCls, (_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(prefixCls, \"-lg\"), mergedSize === 'large'), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-sm\"), mergedSize === 'small'), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-borderless\"), !bordered), _classNames2), className);\n        return React.createElement(_rcTreeSelect[\"default\"], _extends({}, selectProps, {\n          ref: _this.selectRef,\n          prefixCls: prefixCls,\n          className: mergedClassName,\n          listHeight: listHeight,\n          listItemHeight: listItemHeight,\n          treeCheckable: treeCheckable ? React.createElement(\"span\", {\n            className: \"\".concat(prefixCls, \"-tree-checkbox-inner\")\n          }) : treeCheckable,\n          inputIcon: suffixIcon,\n          menuItemSelectedIcon: itemIcon,\n          removeIcon: removeIcon,\n          clearIcon: clearIcon,\n          switcherIcon: function switcherIcon(nodeProps) {\n            return (0, _iconUtil2[\"default\"])(treePrefixCls, _switcherIcon, treeLine, nodeProps);\n          },\n          showTreeIcon: false,\n          notFoundContent: mergedNotFound,\n          getPopupContainer: getPopupContainer || getContextPopupContainer,\n          treeMotion: null,\n          dropdownClassName: mergedDropdownClassName\n        }));\n      });\n    };\n\n    (0, _warning[\"default\"])(props.multiple !== false || !props.treeCheckable, 'TreeSelect', '`multiple` will alway be `true` when `treeCheckable` is true');\n    return _this;\n  }\n\n  _createClass(TreeSelect, [{\n    key: \"focus\",\n    value: function focus() {\n      if (this.selectRef.current) {\n        this.selectRef.current.focus();\n      }\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      if (this.selectRef.current) {\n        this.selectRef.current.blur();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(_configProvider.ConfigConsumer, null, this.renderTreeSelect);\n    }\n  }]);\n\n  return TreeSelect;\n}(React.Component);\n\nTreeSelect.TreeNode = _rcTreeSelect.TreeNode;\nTreeSelect.SHOW_ALL = _rcTreeSelect.SHOW_ALL;\nTreeSelect.SHOW_PARENT = _rcTreeSelect.SHOW_PARENT;\nTreeSelect.SHOW_CHILD = _rcTreeSelect.SHOW_CHILD;\nTreeSelect.defaultProps = {\n  transitionName: 'slide-up',\n  choiceTransitionName: 'zoom',\n  bordered: true\n};\nvar _default = TreeSelect;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["tree-select/index.jsx"],"names":["TreeSelect","React","Component","getPopupContainer","getContextPopupContainer","getPrefixCls","renderEmpty","direction","customizePrefixCls","customizeSize","className","treeCheckable","multiple","listHeight","listItemHeight","notFoundContent","switcherIcon","treeLine","dropdownClassName","bordered","prefixCls","treePrefixCls","treeSelectPrefixCls","mergedDropdownClassName","isMultiple","suffixIcon","itemIcon","removeIcon","clearIcon","mergedNotFound","selectProps","mergedSize","mergedClassName","props","TreeNode","SHOW_ALL","SHOW_PARENT","SHOW_CHILD","transitionName","choiceTransitionName"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport RcTreeSelect, { TreeNode, SHOW_ALL, SHOW_PARENT, SHOW_CHILD, } from 'rc-tree-select';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\nimport getIcons from '../select/utils/iconUtil';\nimport renderSwitcherIcon from '../tree/utils/iconUtil';\nimport SizeContext from '../config-provider/SizeContext';\nclass TreeSelect extends React.Component {\n    constructor(props) {\n        super(props);\n        this.selectRef = React.createRef();\n        this.renderTreeSelect = ({ getPopupContainer: getContextPopupContainer, getPrefixCls, renderEmpty, direction, }) => {\n            const { prefixCls: customizePrefixCls, size: customizeSize, className, treeCheckable, multiple, listHeight = 256, listItemHeight = 32, notFoundContent, switcherIcon, treeLine, getPopupContainer, dropdownClassName, bordered, } = this.props;\n            const prefixCls = getPrefixCls('select', customizePrefixCls);\n            const treePrefixCls = getPrefixCls('select-tree', customizePrefixCls);\n            const treeSelectPrefixCls = getPrefixCls('tree-select', customizePrefixCls);\n            const mergedDropdownClassName = classNames(dropdownClassName, `${treeSelectPrefixCls}-dropdown`, {\n                [`${treeSelectPrefixCls}-dropdown-rtl`]: direction === 'rtl',\n            });\n            const isMultiple = !!(treeCheckable || multiple);\n            // ===================== Icons =====================\n            const { suffixIcon, itemIcon, removeIcon, clearIcon } = getIcons(Object.assign(Object.assign({}, this.props), { multiple: isMultiple }));\n            // ===================== Empty =====================\n            let mergedNotFound;\n            if (notFoundContent !== undefined) {\n                mergedNotFound = notFoundContent;\n            }\n            else {\n                mergedNotFound = renderEmpty('Select');\n            }\n            // ==================== Render =====================\n            const selectProps = omit(this.props, [\n                'prefixCls',\n                'suffixIcon',\n                'itemIcon',\n                'removeIcon',\n                'clearIcon',\n                'switcherIcon',\n                'size',\n                'bordered',\n            ]);\n            return (<SizeContext.Consumer>\n        {size => {\n                const mergedSize = customizeSize || size;\n                const mergedClassName = classNames(!customizePrefixCls && treeSelectPrefixCls, {\n                    [`${prefixCls}-lg`]: mergedSize === 'large',\n                    [`${prefixCls}-sm`]: mergedSize === 'small',\n                    [`${prefixCls}-rtl`]: direction === 'rtl',\n                    [`${prefixCls}-borderless`]: !bordered,\n                }, className);\n                return (<RcTreeSelect {...selectProps} ref={this.selectRef} prefixCls={prefixCls} className={mergedClassName} listHeight={listHeight} listItemHeight={listItemHeight} treeCheckable={treeCheckable ? (<span className={`${prefixCls}-tree-checkbox-inner`}/>) : (treeCheckable)} inputIcon={suffixIcon} menuItemSelectedIcon={itemIcon} removeIcon={removeIcon} clearIcon={clearIcon} switcherIcon={(nodeProps) => renderSwitcherIcon(treePrefixCls, switcherIcon, treeLine, nodeProps)} showTreeIcon={false} notFoundContent={mergedNotFound} getPopupContainer={getPopupContainer || getContextPopupContainer} treeMotion={null} dropdownClassName={mergedDropdownClassName}/>);\n            }}\n      </SizeContext.Consumer>);\n        };\n        warning(props.multiple !== false || !props.treeCheckable, 'TreeSelect', '`multiple` will alway be `true` when `treeCheckable` is true');\n    }\n    focus() {\n        if (this.selectRef.current) {\n            this.selectRef.current.focus();\n        }\n    }\n    blur() {\n        if (this.selectRef.current) {\n            this.selectRef.current.blur();\n        }\n    }\n    render() {\n        return <ConfigConsumer>{this.renderTreeSelect}</ConfigConsumer>;\n    }\n}\nTreeSelect.TreeNode = TreeNode;\nTreeSelect.SHOW_ALL = SHOW_ALL;\nTreeSelect.SHOW_PARENT = SHOW_PARENT;\nTreeSelect.SHOW_CHILD = SHOW_CHILD;\nTreeSelect.defaultProps = {\n    transitionName: 'slide-up',\n    choiceTransitionName: 'zoom',\n    bordered: true,\n};\nexport { TreeNode };\nexport default TreeSelect;\n"]},"metadata":{},"sourceType":"script"}